package kr.or.iei.notice.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import kr.or.iei.notice.model.service.NoticeService;
import kr.or.iei.notice.model.vo.Notice;
import kr.or.iei.notice.model.vo.NoticeFile;
import kr.or.iei.notice.model.vo.NoticePageData;

@Controller
@RequestMapping("/notice/")
public class NoticeController {

	@Autowired
	@Qualifier("noticeService")
	private NoticeService service;

	
	@GetMapping("getList.kh")
	public String getList(int reqPage, Model model) {	
		NoticePageData pd = service.selectNoticeList(reqPage);
		
		//응답 페이지(list.jsp)에서 게시글 목록을 보여주기 위해, 응답 데이터를 등록할 수 있는 Model 객체 매개변수에 추가.
		model.addAttribute("list", pd.getList());
		model.addAttribute("pageNavi", pd.getPageNavi());
		
		return "notice/list";
	}
	
	@GetMapping("writeFrm.kh")
	public String writeFrm() {
		return "notice/write";
	}
	
	@PostMapping("write.kh")
	public String write(HttpServletRequest request , MultipartFile [] files, Notice notice) {
		//서비스에 파일 정보를 전달하기 위한 ArrayList
		ArrayList<NoticeFile> fileList = new ArrayList<NoticeFile>();
		
		System.out.println(files.length);
		
		for(int i=0; i<files.length; i++) {
			
			MultipartFile file = files[i];
			
			if(!file.isEmpty()) {
				String savePath = request.getSession().getServletContext().getRealPath("/resources/upload/notice/");
				
				System.out.println("savepath" + savePath);
				String originalFileName = file.getOriginalFilename(); //업로드한 파일명 (test1.txt)
				String fileName = originalFileName.substring(0,originalFileName.lastIndexOf(".")); //test1
				String extension = originalFileName.substring(originalFileName.lastIndexOf(".")); //.txt
				
				String toDay = new SimpleDateFormat("yyyyMMdd").format(new Date()); //오늘 날짜
				int ranNum = new Random().nextInt(10000)+1; //1~10000 사이 랜덤 숫자
				String filePath = fileName + "_" + toDay + "_" + ranNum + extension; //test1 + _ + 20241205 + _랜덤숫자 + .txt => test1_20241205_4525.txt
				
				savePath += filePath;
				
				//파일 업로드를 위한 보조 스트림
				BufferedOutputStream bos = null;
				
				try {
					byte [] bytes = file.getBytes();
					FileOutputStream fos = new FileOutputStream(new File(savePath));
					bos = new BufferedOutputStream(fos);
					bos.write(bytes);
					
					NoticeFile noticeFile = new NoticeFile();
					//tbl_notice_file (file_no, notice_no, file_name, file_path)
					noticeFile.setFileName(originalFileName);  //원본 파일명
					noticeFile.setFilePath(filePath);		   //업로드 파일명
					
					//리스트에 추가
					fileList.add(noticeFile);
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally {
					try {
						bos.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
		
		int result = service.insertNotice(notice, fileList);
		
	
		return "redirect:/notice/getList.kh?reqPage=1";
	}
	
	
	@GetMapping("detailView.kh")
	public String detailView(String noticeNo, Model model) {
		Notice notice = service.selectOneNotice(noticeNo);
		
		model.addAttribute("notice",notice);
		
		return "notice/detailView";
	}
	
	
	
}
