/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2025-01-09 06:16:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class userProfile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1733127990249L));
    _jspx_dependants.put("/WEB-INF/views/member/sideMenu.jsp", Long.valueOf(1736382410481L));
    _jspx_dependants.put("/WEB-INF/views/member/rightSideMenu.jsp", Long.valueOf(1736317703488L));
    _jspx_dependants.put("jar:file:/C:/spring-workspace/final_git/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("/WEB-INF/views/member/postModal.jsp", Long.valueOf(1736402959085L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel =\"stylesheet\"  href=\"/resources/default.css\">\r\n");
      out.write("<!-- Font Awesome -->\r\n");
      out.write("<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write(".user-follow-btn {\r\n");
      out.write("    color: white;\r\n");
      out.write("    background-color: green; /* 예: 초록색 배경 */\r\n");
      out.write("    padding: 5px 10px;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".user-unfollow-btn {\r\n");
      out.write("    color: black;\r\n");
      out.write("    background-color: #ced4da; /* 예: 빨간색 배경 */\r\n");
      out.write("    padding: 5px 10px;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 추가로 hover 시 효과도 줄 수 있음 */\r\n");
      out.write(".user-follow-btn:hover, .user-unfollow-btn:hover {\r\n");
      out.write("    opacity: 0.8;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	\r\n");
      out.write("		<nav class=\"side-menu\">\r\n");
      out.write("			<div class=\"nav-logo\">\r\n");
      out.write("				<img alt=\"댕냥일기\"  src=\"/resources/css_image/logo.png\"  class=\"logo-img\">\r\n");
      out.write("				<span class=\"nav-logo-text\">댕냥일기</span>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			  <div class=\"menu-list\">\r\n");
      out.write("				<div class=\"one-menu\">\r\n");
      out.write("					<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
      out.write("					<a href=\"/member/mainFeed.kh\" class=\"menu-link\">홈</a>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"one-menu\">\r\n");
      out.write("					<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
      out.write("					<a href=\"/member/search.kh\" class=\"menu-link\">검색</a>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"one-menu\">\r\n");
      out.write("					<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
      out.write("					 <a class=\"open-notification-btn\" >알림</a>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"one-menu\">\r\n");
      out.write("					<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
      out.write("					<a href=\"/chat/chatRoomList.kh\" class=\"menu-link\">메시지</a>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("			</div>		\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"profile\">\r\n");
      out.write("				<div class=\"profile-frame\">\r\n");
      out.write("					<img class=\"profileImage\"\r\n");
      out.write("                            src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty loginMember.userImage ? loginMember.userImage : '/resources/profile_file/default_profile.png'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("                            alt=\"프로필 이미지\" />\r\n");
      out.write("				</div>\r\n");
      out.write("					<a class=\"myNick\" href=\"/post/myFeedFrm.kh\"> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</a>\r\n");
      out.write("			</div>\r\n");
      out.write("			<hr>\r\n");
      out.write("			<hr>\r\n");
      out.write("			<a href=\"/member/logout.kh\" style=\"color: gray;\">\r\n");
      out.write("			<i class=\"fa-solid fa-right-from-bracket\" style=\"color: gray;\"></i> 로그아웃</a>					\r\n");
      out.write("		</nav>\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	 <div class=\"notification-sidebar\" id=\"notificationSidebar\">\r\n");
      out.write("		    <button class=\"close-sidebar-btn\">&times;</button> <!-- X 버튼 -->\r\n");
      out.write("		    <div class=\"notification-header\">\r\n");
      out.write("		        <span>알림</span>\r\n");
      out.write("		        <button class=\"mark-all-read-btn\">지우기</button>\r\n");
      out.write("		    </div>\r\n");
      out.write("		    <div class=\"notification-content\">\r\n");
      out.write("		        <p>읽지 않은 알림이 없습니다.</p>\r\n");
      out.write("		    </div>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("   <script>\r\n");
      out.write("	    $(document).ready(function () {\r\n");
      out.write("	        // JSP에서 사용자 번호를 전달받음\r\n");
      out.write("	        let userNo = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("; // JSP 변수\r\n");
      out.write("	\r\n");
      out.write("	        // 알림 사이드바 열기\r\n");
      out.write("	        $('.open-notification-btn').click(function () {\r\n");
      out.write("	            $('#notificationSidebar').addClass('open');\r\n");
      out.write("	            fetchNotifications(); // 알림 가져오기\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 알림 사이드바 닫기\r\n");
      out.write("	        $('.close-sidebar-btn').click(function () {\r\n");
      out.write("	            $('#notificationSidebar').removeClass('open');\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 외부 클릭 시 닫기\r\n");
      out.write("	        $(document).click(function (event) {\r\n");
      out.write("	            if (!$(event.target).closest('#notificationSidebar, .open-notification-btn').length) {\r\n");
      out.write("	                $('#notificationSidebar').removeClass('open');\r\n");
      out.write("	            }\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 알림 가져오기 (문자열 결합 방식)\r\n");
      out.write("	        function fetchNotifications() {\r\n");
      out.write("	            var url = '/notify/poll/' + userNo;\r\n");
      out.write("	\r\n");
      out.write("	            $.ajax({\r\n");
      out.write("	                url: url,\r\n");
      out.write("	                method: 'GET',\r\n");
      out.write("	                success: function (notifications) {\r\n");
      out.write("	                    var contentHtml = '';\r\n");
      out.write("	\r\n");
      out.write("	                    if (notifications.length > 0) {\r\n");
      out.write("	                        notifications.forEach(function (notification) {\r\n");
      out.write("	                            contentHtml +=\r\n");
      out.write("	                                '<div class=\"notification-item\">' +\r\n");
      out.write("	                                '<span>' + notification.notifyContent + '</span>' +\r\n");
      out.write("	                                '</div>';\r\n");
      out.write("	                        });\r\n");
      out.write("	                    } else {\r\n");
      out.write("	                        contentHtml = '<p>읽지 않은 알림이 없습니다.</p>';\r\n");
      out.write("	                    }\r\n");
      out.write("	\r\n");
      out.write("	                    $('.notification-content').html(contentHtml);\r\n");
      out.write("	                },\r\n");
      out.write("	                error: function () {\r\n");
      out.write("	                    console.error('알림을 가져오는 중 오류 발생');\r\n");
      out.write("	                }\r\n");
      out.write("	            });\r\n");
      out.write("	        }\r\n");
      out.write("	\r\n");
      out.write("	     // 모든 알림 읽음 처리\r\n");
      out.write("	        function markAllAsRead() {\r\n");
      out.write("	            $.ajax({\r\n");
      out.write("	                url: '/notify/mark-all-read/' + userNo,\r\n");
      out.write("	                method: 'PUT',\r\n");
      out.write("	                success: function (response) {\r\n");
      out.write("	                    if (response === 'success') {\r\n");
      out.write("	                        console.log('모든 알림 읽음 처리 완료');\r\n");
      out.write("	                        fetchNotifications(); // UI 갱신\r\n");
      out.write("	                    } else {\r\n");
      out.write("	                        console.error('모든 알림 읽음 처리 실패');\r\n");
      out.write("	                    }\r\n");
      out.write("	                },\r\n");
      out.write("	                error: function () {\r\n");
      out.write("	                    console.error('모든 알림 읽음 처리 중 오류 발생');\r\n");
      out.write("	                }\r\n");
      out.write("	            });\r\n");
      out.write("	        }\r\n");
      out.write("\r\n");
      out.write("	        // 버튼 클릭 이벤트에 연결\r\n");
      out.write("	        $('.mark-all-read-btn').click(markAllAsRead);\r\n");
      out.write("\r\n");
      out.write("	       \r\n");
      out.write("	    });\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("			\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("	<main id=\"myfeed-main\">\r\n");
      out.write("		<div class=\"profile\" id=\"myfeed-profile\">\r\n");
      out.write("			<div class=\"profile-frame\" id=\"myfeed-frame\">\r\n");
      out.write("				<img class=\"profileImage\"\r\n");
      out.write("                            src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty member.userImage ? member.userImage : '/resources/profile_file/default_profile.png'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("                            alt=\"프로필 이미지\" />\r\n");
      out.write("			</div>\r\n");
      out.write("			<div id=\"profile-text\">\r\n");
      out.write("				<span id=\"myId\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span> <br> <span id=\"myNick\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userNickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("\r\n");
      out.write("				<div id=\"follow-text\">\r\n");
      out.write("    				<span>팔로워 <span class=\"followerCountSpan\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${followerCount}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span></span>\r\n");
      out.write("					<span>팔로잉 <span class=\"followingCountSpan\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${followingCount}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span></span>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div>\r\n");
      out.write("					<div>\r\n");
      out.write("						");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		<div class=\"post-container\">\r\n");
      out.write("	   		");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("	    </div>\r\n");
      out.write("	    \r\n");
      out.write("	    ");
      out.write("\r\n");
      out.write("	    ");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/default.css\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<!-- <script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script> -->\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/@yaireo/tagify\"></script>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.polyfills.min.js\"></script>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.css\"\r\n");
      out.write("	rel=\"stylesheet\" type=\"text/css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<div class=\"modal\">\r\n");
      out.write("		<div class=\"modal-place\">\r\n");
      out.write("			<div class=\"modal-contents\">\r\n");
      out.write("				<div class=\"modal-image\">\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"modal-body\">\r\n");
      out.write("					<div class=\"post-section\">\r\n");
      out.write("						<div class=\"top\">\r\n");
      out.write("							<div class=\"modal-user\">\r\n");
      out.write("								<div class=\"profile-frame\" id=\"modal-profile\">\r\n");
      out.write("									<img class=\"profileImage\"\r\n");
      out.write("				                            src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty loginMember.userImage ? loginMember.userImage : '/resources/profile_file/default_profile.png'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("				                            alt=\"프로필 이미지\" />\r\n");
      out.write("								</div>\r\n");
      out.write("								<p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"modal-buttons\">\r\n");
      out.write("								<i class=\"fa-solid fa-pen\" id=\"post-update\"></i> <i\r\n");
      out.write("									class=\"fa-solid fa-trash\" id=\"post-delete\"></i> <a href=\"#\"\r\n");
      out.write("									class=\"modal-close\">X</a>\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("\r\n");
      out.write("						<div class=\"post-content\">\r\n");
      out.write("							<div class=\"post-content-text\"></div>\r\n");
      out.write("							<div class=\"post-content-hashtag\">\r\n");
      out.write("								<input name=\"tags\" readonly />\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("						\r\n");
      out.write("						<!-- 게시글 좋아요 버튼 -->\r\n");
      out.write("						<div class=\"like-btn post-like\" data-id=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${postNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" data-user-no=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" data-liked=\"false\">\r\n");
      out.write("						    <i class=\"fa-regular fa-heart\"></i>\r\n");
      out.write("						    <span class=\"like-count\">0</span>\r\n");
      out.write("						</div>\r\n");
      out.write("			            \r\n");
      out.write("					</div>\r\n");
      out.write("\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("				\r\n");
      out.write("					<div class=\"comment-section\">\r\n");
      out.write("						<div class=\"comment-list\">\r\n");
      out.write("							");
      out.write("\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					<div class=\"comment-form-wrapper\">\r\n");
      out.write("					    <div class=\"reply-target\" style=\"display: none;\">\r\n");
      out.write("					        <span id=\"reply-target-text\"></span>\r\n");
      out.write("					        <button class=\"cancel-reply\">취소</button>\r\n");
      out.write("					    </div>\r\n");
      out.write("					    \r\n");
      out.write("					    <form id=\"cmtForm\" action=\"/post/cmtWrite.kh\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("					        <input type=\"hidden\" name=\"userNo\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("					        <input type=\"hidden\" id=\"parentNo\" value=\"0\">\r\n");
      out.write("					        <div class=\"comment-form\">\r\n");
      out.write("					            <textarea class=\"comment-input\" placeholder=\"댓글 달기...\"></textarea>\r\n");
      out.write("					            <button class=\"submit-comment\">\r\n");
      out.write("					                <i class=\"fa-solid fa-comment\"></i>\r\n");
      out.write("					            </button>\r\n");
      out.write("					        </div>\r\n");
      out.write("					    </form>\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script>    		\r\n");
      out.write("		$(document).ready(function () {\r\n");
      out.write("		    // 콘텐츠 모달\r\n");
      out.write("		    $(\".feed-thumbnail\").on(\"click\", function () {\r\n");
      out.write("		        const postGrid = $(this).closest(\".post-grid\"); // 클릭된 썸네일의 부모 요소\r\n");
      out.write("		        let postNo = postGrid.data(\"id\"); // 게시글 ID\r\n");
      out.write("		        const postContent = postGrid.find(\".hidden-post-content\").text(); // 숨겨진 콘텐츠 가져오기\r\n");
      out.write("	\r\n");
      out.write("		        // 초기 모달 설정\r\n");
      out.write("		        $(\".modal\").css(\"display\", \"block\");\r\n");
      out.write("		        $(\".modal .modal-image\").html(`\r\n");
      out.write("        		   <button class=\"story-nav-btn story-prev-btn previous\">\r\n");
      out.write("                  	 <span class=\"material-icons nav-icons\">navigate_before</span>\r\n");
      out.write("                   </button>\r\n");
      out.write("		            <img id=\"current-image\" src=\"\" alt=\"thumbnail\">\r\n");
      out.write("		            <button class=\"story-nav-btn story-next-btn next\">\r\n");
      out.write("                    	<span class=\"material-icons nav-icons\">navigate_next</span>\r\n");
      out.write("                   </button>\r\n");
      out.write("		        `);\r\n");
      out.write("		        $(\".modal .post-content-text\").text(postContent);\r\n");
      out.write("	\r\n");
      out.write("		        // 이미지 슬라이드 호출\r\n");
      out.write("		        imgSlide(postNo);\r\n");
      out.write("		    });\r\n");
      out.write("	\r\n");
      out.write("		    // 이미지 슬라이드 함수\r\n");
      out.write("		    function imgSlide(postNo) {\r\n");
      out.write("		        $.ajax({\r\n");
      out.write("		            url: \"/post/imgLists.kh\",\r\n");
      out.write("		            method: \"get\",\r\n");
      out.write("		            data: { postNo: postNo },\r\n");
      out.write("		            success: function (res) {\r\n");
      out.write("		                let imgIndex = 0; // 초기 인덱스\r\n");
      out.write("		                const totalImages = res.length;\r\n");
      out.write("	\r\n");
      out.write("		                // 첫 이미지 설정\r\n");
      out.write("		                $(\"#current-image\").attr(\"src\", \"/resources/post_file/\" + res[imgIndex]);\r\n");
      out.write("	\r\n");
      out.write("		                // 이벤트 핸들러\r\n");
      out.write("		                $(\".previous\").off(\"click\").on(\"click\", function () {\r\n");
      out.write("		                    if (imgIndex > 0) {\r\n");
      out.write("		                        imgIndex--;\r\n");
      out.write("		                        $(\"#current-image\").attr(\"src\", \"/resources/post_file/\" + res[imgIndex]);\r\n");
      out.write("		                        updateButtonState();\r\n");
      out.write("		                    }\r\n");
      out.write("		                });\r\n");
      out.write("	\r\n");
      out.write("		                $(\".next\").off(\"click\").on(\"click\", function () {\r\n");
      out.write("		                    if (imgIndex < totalImages - 1) {\r\n");
      out.write("		                        imgIndex++;\r\n");
      out.write("		                        $(\"#current-image\").attr(\"src\", \"/resources/post_file/\" + res[imgIndex]);\r\n");
      out.write("		                        updateButtonState();\r\n");
      out.write("		                    }\r\n");
      out.write("		                });\r\n");
      out.write("	\r\n");
      out.write("		                // 버튼 상태 업데이트\r\n");
      out.write("		                updateButtonState();\r\n");
      out.write("	\r\n");
      out.write("		                function updateButtonState() {\r\n");
      out.write("		                    $(\".previous\").css(\"visibility\", imgIndex === 0 ? \"hidden\" : \"visible\");\r\n");
      out.write("		                    $(\".next\").css(\"visibility\", imgIndex === totalImages - 1 ? \"hidden\" : \"visible\");\r\n");
      out.write("		                }\r\n");
      out.write("		            },\r\n");
      out.write("		            error: function () {\r\n");
      out.write("		                console.error(\"AJAX 통신 에러 발생\");\r\n");
      out.write("		            },\r\n");
      out.write("		        });\r\n");
      out.write("		    }\r\n");
      out.write("		    \r\n");
      out.write("	\r\n");
      out.write("		    // 게시글 클릭 시 해당 게시글 ID로 데이터 호출\r\n");
      out.write("		    $(\".feed-thumbnail\").on(\"click\", function () {\r\n");
      out.write("		    	\r\n");
      out.write("		        let postNo = $(this).closest(\".post-grid\").data(\"id\"); // 게시글 ID 가져오기\r\n");
      out.write("		       \r\n");
      out.write("		        if (!postNo) {\r\n");
      out.write("		            console.error(\"게시글 ID를 찾을 수 없습니다.\");\r\n");
      out.write("		            return;\r\n");
      out.write("		        }\r\n");
      out.write("		        \r\n");
      out.write("		        $(\".modal\").data(\"postNo\", postNo); // 모달에 postNo 저장\r\n");
      out.write("		        \r\n");
      out.write("		        callHashtag(postNo); // 해시태그 불러오기\r\n");
      out.write("		        callComment(postNo); //댓글 불러오기\r\n");
      out.write("		        \r\n");
      out.write("		        // 다른 함수에도 postNo 전달\r\n");
      out.write("		        handlePostLike(postNo);\r\n");
      out.write("		        handleCommentLike(); \r\n");
      out.write("		        loadPostLikeStatus(postNo);\r\n");
      out.write("		       \r\n");
      out.write("		    });	  \r\n");
      out.write("		\r\n");
      out.write("		    \r\n");
      out.write("		    \r\n");
      out.write("		    \r\n");
      out.write("		    // 해시태그 불러오기\r\n");
      out.write("		    function callHashtag(postNo) {\r\n");
      out.write("		        $.ajax({\r\n");
      out.write("		            url: \"/post/hashtags.kh\", // 서버 요청 URL\r\n");
      out.write("		            method: \"GET\", // 요청 방식\r\n");
      out.write("		            data: { postNo: postNo }, // 서버에 전달할 데이터\r\n");
      out.write("		            success: function (res) {\r\n");
      out.write("		                const tagsString = res.join(\", \"); // 콤마로 구분된 문자열로 변환\r\n");
      out.write("		                const input = document.querySelector('input[name=\"tags\"]');\r\n");
      out.write("	\r\n");
      out.write("		                if (!input) {\r\n");
      out.write("		                    console.error(\"태그 입력 필드를 찾을 수 없습니다.\");\r\n");
      out.write("		                    return;\r\n");
      out.write("		                }\r\n");
      out.write("	\r\n");
      out.write("		                input.value = tagsString;\r\n");
      out.write("	\r\n");
      out.write("		                // Tagify 초기화 - 이미 초기화된 경우 중복 방지\r\n");
      out.write("		                if (!input._tagify) {\r\n");
      out.write("		                    new Tagify(input, {\r\n");
      out.write("		                        readOnly: true,\r\n");
      out.write("		                        delimiters: \", \", // 콤마와 공백으로 태그 구분\r\n");
      out.write("		                    });\r\n");
      out.write("		                } else {\r\n");
      out.write("		                    input._tagify.destroy();\r\n");
      out.write("		                    new Tagify(input, {\r\n");
      out.write("		                        readOnly: true,\r\n");
      out.write("		                        delimiters: \", \",\r\n");
      out.write("		                    });\r\n");
      out.write("		                }\r\n");
      out.write("		            },\r\n");
      out.write("		            error: function () {\r\n");
      out.write("		                console.error(\"AJAX 통신 오류 발생!\");\r\n");
      out.write("		            },\r\n");
      out.write("		        });\r\n");
      out.write("		    }\r\n");
      out.write("			\r\n");
      out.write("		  //댓글 불러오기\r\n");
      out.write("		function callComment(postNo) {\r\n");
      out.write("		    $.ajax({\r\n");
      out.write("		        url: \"/post/comment.kh\",\r\n");
      out.write("		        type: \"get\",\r\n");
      out.write("		        dataType: \"json\",\r\n");
      out.write("		        data: { postNo: postNo },\r\n");
      out.write("		        success: function (res) {\r\n");
      out.write("		            const userNo = $(\"input[name='userNo']\").val(); // 로그인 사용자 ID\r\n");
      out.write("		            $(\".comment-list\").empty(); // 댓글 목록 초기화\r\n");
      out.write("		\r\n");
      out.write("		            // 댓글을 parentNo를 기준으로 정렬\r\n");
      out.write("		            const sortedComments = res.sort((a, b) => a.parentNo - b.parentNo);\r\n");
      out.write("		\r\n");
      out.write("		            sortedComments.forEach(function (comment) {\r\n");
      out.write("		                let commentHtml = '<div class=\"comment\" id=\"comment-' + comment.commentNo + '\">';\r\n");
      out.write("		                commentHtml += '<p><strong>' + comment.userNickname + '</strong>: ' + comment.commentContent + '</p>';\r\n");
      out.write("		\r\n");
      out.write("		                // 댓글 좋아요 버튼 추가\r\n");
      out.write("		                commentHtml += '<div class=\"like-btn comment-like\" data-id=\"' + comment.commentNo + '\" data-liked=\"' + comment.isLiked + '\">';\r\n");
      out.write("		                if (comment.isLiked) {\r\n");
      out.write("		                    commentHtml += '<i class=\"fa-solid fa-heart\"></i>';\r\n");
      out.write("		                } else {\r\n");
      out.write("		                    commentHtml += '<i class=\"fa-regular fa-heart\"></i>';\r\n");
      out.write("		                }\r\n");
      out.write("		                commentHtml += '<span class=\"like-count\">' + comment.likeCount + '</span>';\r\n");
      out.write("		                commentHtml += '</div>';\r\n");
      out.write("		\r\n");
      out.write("		                // 수정/삭제 버튼 추가 (작성자만)\r\n");
      out.write("		                if (comment.userNo == userNo) {\r\n");
      out.write("		                    commentHtml += '<button class=\"edit-comment\" data-id=\"' + comment.commentNo + '\">수정</button>';\r\n");
      out.write("		                    commentHtml += '<button class=\"delete-comment\" data-id=\"' + comment.commentNo + '\">삭제</button>';\r\n");
      out.write("		                }\r\n");
      out.write("		\r\n");
      out.write("		                commentHtml += '<a href=\"#\" class=\"reply-link\" data-id=\"' + comment.commentNo + '\">답글 달기</a>';\r\n");
      out.write("		                commentHtml += '<div class=\"reply-list\" id=\"reply-' + comment.commentNo + '\"></div>'; // 답글 리스트 컨테이너 추가\r\n");
      out.write("		                commentHtml += '</div>';\r\n");
      out.write("		\r\n");
      out.write("		                // 부모 댓글인지 확인\r\n");
      out.write("		                if (comment.parentNo == 0) {\r\n");
      out.write("		                    $(\".comment-list\").append(commentHtml); // 부모 댓글 추가\r\n");
      out.write("		                } else {\r\n");
      out.write("		                    // 부모 댓글 아래에 답글 추가\r\n");
      out.write("		                    const parentElement = $('#reply-' + comment.parentNo);\r\n");
      out.write("		                    if (parentElement.length > 0) {\r\n");
      out.write("		                        parentElement.append(\r\n");
      out.write("		                            '<div class=\"comment-reply\" style=\"margin-left: 20px;\">' + // 들여쓰기 추가\r\n");
      out.write("		                            '<p>↳ <strong>' + comment.userNickname + '</strong>: ' + comment.commentContent + '</p>' + // 꺾쇠 추가\r\n");
      out.write("		                            '<div class=\"like-btn comment-like\" data-id=\"' + comment.commentNo + '\" data-liked=\"' + comment.isLiked + '\">' +\r\n");
      out.write("		                            (comment.isLiked ? '<i class=\"fa-solid fa-heart\"></i>' : '<i class=\"fa-regular fa-heart\"></i>') +\r\n");
      out.write("		                            '<span class=\"like-count\">' + comment.likeCount + '</span>' +\r\n");
      out.write("		                            '</div>' +\r\n");
      out.write("		                            (comment.userNo == userNo\r\n");
      out.write("		                                ? '<button class=\"edit-comment\" data-id=\"' + comment.commentNo + '\">수정</button>' +\r\n");
      out.write("		                                  '<button class=\"delete-comment\" data-id=\"' + comment.commentNo + '\">삭제</button>'\r\n");
      out.write("		                                : '') +\r\n");
      out.write("		                            '</div>'\r\n");
      out.write("		                        );\r\n");
      out.write("		                    } else {\r\n");
      out.write("		                        console.error(\"부모 댓글이 존재하지 않습니다. parentNo:\", comment.parentNo);\r\n");
      out.write("		                    }\r\n");
      out.write("		                }\r\n");
      out.write("		            });\r\n");
      out.write("		\r\n");
      out.write("		            updateCommentLikeStatus(); // 좋아요 상태 초기화\r\n");
      out.write("		        },\r\n");
      out.write("		        error: function (xhr, status, error) {\r\n");
      out.write("		            console.error(\"AJAX 통신 오류:\", error);\r\n");
      out.write("		        },\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		 \r\n");
      out.write("\r\n");
      out.write("		 // 댓글 작성\r\n");
      out.write("		    let currentParentNo = 0;\r\n");
      out.write("\r\n");
      out.write("		    $(\"#cmtForm\").on(\"submit\", function (e) {\r\n");
      out.write("		        e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("		        const commentInput = $(\".comment-input\").val().trim();\r\n");
      out.write("		        const userNo = $(\"input[name='userNo']\").val();\r\n");
      out.write("		        const postNo = $(\".modal\").data(\"postNo\"); // 모달에서 가져오기\r\n");
      out.write("		        const submitButton = $(\".submit-comment\");\r\n");
      out.write("		        \r\n");
      out.write("		        console.log(\"댓글 작성 요청 - postNo:\", postNo);\r\n");
      out.write("\r\n");
      out.write("		        if (!commentInput || !postNo) {\r\n");
      out.write("		            alert(\"댓글 내용을 입력하거나 게시글을 다시 선택하세요.\");\r\n");
      out.write("		            return;\r\n");
      out.write("		        }\r\n");
      out.write("\r\n");
      out.write("		        submitButton.prop(\"disabled\", true); // 중복 요청 방지\r\n");
      out.write("\r\n");
      out.write("		        $.ajax({\r\n");
      out.write("		            url: \"/post/cmtWrite.kh\",\r\n");
      out.write("		            method: \"POST\",\r\n");
      out.write("		            contentType: \"application/json\",\r\n");
      out.write("		            data: JSON.stringify({\r\n");
      out.write("		                commentContent: commentInput,\r\n");
      out.write("		                userNo: userNo,\r\n");
      out.write("		                postNo: postNo,\r\n");
      out.write("		                parentNo: currentParentNo // 답글의 경우 사용\r\n");
      out.write("		            }),\r\n");
      out.write("		            success: function (response) {\r\n");
      out.write("		                if (response.success) {\r\n");
      out.write("		                    callComment(postNo); // 댓글 목록 갱신\r\n");
      out.write("		                    $(\".comment-input\").val(\"\"); // 입력 필드 초기화\r\n");
      out.write("		                    currentParentNo = 0; // 답글 초기화\r\n");
      out.write("		                    $(\".reply-target\").hide();\r\n");
      out.write("		                    $(\"#reply-target-text\").text(\"\");\r\n");
      out.write("		                } else {\r\n");
      out.write("		                    alert(response.message);\r\n");
      out.write("		                }\r\n");
      out.write("		            },\r\n");
      out.write("		            error: function () {\r\n");
      out.write("		                alert(\"댓글 작성 중 오류가 발생했습니다.\");\r\n");
      out.write("		            },\r\n");
      out.write("		            complete: function () {\r\n");
      out.write("		                submitButton.prop(\"disabled\", false); // 버튼 활성화\r\n");
      out.write("		            }\r\n");
      out.write("		        });\r\n");
      out.write("		    });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		 // 답글 달기\r\n");
      out.write("		    $(document).on(\"click\", \".reply-link\", function (e) {\r\n");
      out.write("		        e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("		        const parentNo = $(this).data(\"id\"); // 부모 댓글 ID 가져오기\r\n");
      out.write("		        const userNickname = $(\"#comment-\" + parentNo).find(\"strong\").first().text().trim(); // 부모 댓글 닉네임 가져오기\r\n");
      out.write("\r\n");
      out.write("		        currentParentNo = parentNo; // 현재 부모 댓글 ID 설정\r\n");
      out.write("		        $(\"#parentNo\").val(parentNo); // 숨겨진 필드에 부모 댓글 ID 설정\r\n");
      out.write("\r\n");
      out.write("		        // 답글 대상 표시\r\n");
      out.write("		        $(\"#reply-target-text\").text(userNickname + \"님에게 답글 작성 중\");\r\n");
      out.write("		        $(\".reply-target\").show(); // 답글 대상 보이기\r\n");
      out.write("		    });\r\n");
      out.write("\r\n");
      out.write("		 \r\n");
      out.write("		//삭제 기능\r\n");
      out.write("		  $(document).on(\"click\", \".delete-comment\", function () {\r\n");
      out.write("			    const commentNo = $(this).data(\"id\");\r\n");
      out.write("			    const postNo = $(\".post-grid\").data(\"id\"); // 현재 게시글 ID 가져오기\r\n");
      out.write("				\r\n");
      out.write("			    if (confirm(\"정말로 삭제하시겠습니까?\")) {\r\n");
      out.write("			        $.ajax({\r\n");
      out.write("			            url: \"/post/cmtDelete.kh\",\r\n");
      out.write("			            method: \"GET\",\r\n");
      out.write("			            data: { commentNo: commentNo },\r\n");
      out.write("			            success: function (response) {\r\n");
      out.write("			                // 서버 응답 데이터 확인\r\n");
      out.write("			                console.log(response);\r\n");
      out.write("			\r\n");
      out.write("			                if (response.success) {\r\n");
      out.write("			                    alert(response.message);\r\n");
      out.write("			                    callComment(postNo); // 댓글 목록 갱신\r\n");
      out.write("			                } else {\r\n");
      out.write("			                    alert(response.message);\r\n");
      out.write("			                }\r\n");
      out.write("			            },\r\n");
      out.write("			            error: function (xhr, status, error) {\r\n");
      out.write("			                console.error(\"AJAX 요청 오류:\", error);\r\n");
      out.write("			                alert(\"댓글 삭제 중 오류가 발생했습니다.\");\r\n");
      out.write("			            }\r\n");
      out.write("			        });\r\n");
      out.write("			    }\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		// 댓글 수정 버튼 클릭 시\r\n");
      out.write("		  $(document).on(\"click\", \".edit-comment\", function () {\r\n");
      out.write("		      const $commentDiv = $(this).closest(\".comment, .comment-reply\"); // 댓글 영역\r\n");
      out.write("		      const commentNo = $(this).data(\"id\"); // 댓글 번호\r\n");
      out.write("\r\n");
      out.write("		      // 이미 수정 중인 상태라면 중복 실행 방지\r\n");
      out.write("		      if ($commentDiv.find(\".edit-wrapper\").length > 0) {\r\n");
      out.write("		          return;\r\n");
      out.write("		      }\r\n");
      out.write("\r\n");
      out.write("		      // 수정 중 입력창 추가 (기존 내용 표시하지 않음)\r\n");
      out.write("		      let editHtml = '<div class=\"edit-wrapper\">';\r\n");
      out.write("		      editHtml += '<textarea class=\"edit-input\" style=\"width: 100%; height: 80px; resize: none;\" placeholder=\"수정할 내용을 입력해주세요.\"></textarea>';\r\n");
      out.write("		      editHtml += '<button class=\"save-comment\" data-id=\"' + commentNo + '\">저장</button>';\r\n");
      out.write("		      editHtml += '<button class=\"cancel-edit\">취소</button>';\r\n");
      out.write("		      editHtml += '</div>';\r\n");
      out.write("		      $commentDiv.append(editHtml);\r\n");
      out.write("		  });\r\n");
      out.write("\r\n");
      out.write("		// 댓글 수정 저장\r\n");
      out.write("		  $(document).on(\"click\", \".save-comment\", function () {\r\n");
      out.write("		      const $commentDiv = $(this).closest(\".comment, .comment-reply\"); // 댓글 영역\r\n");
      out.write("		      const commentNo = $(this).data(\"id\"); // 댓글 번호\r\n");
      out.write("		      const newContent = $commentDiv.find(\".edit-input\").val().trim(); // 새로 입력된 댓글 내용\r\n");
      out.write("		      const userNo = $(\"input[name='userNo']\").val(); // 로그인 사용자 ID 가져오기\r\n");
      out.write("		      const userNickname = $commentDiv.find(\"strong\").text(); // 기존 닉네임 가져오기\r\n");
      out.write("\r\n");
      out.write("		      if (!newContent) {\r\n");
      out.write("		          alert(\"내용을 입력해주세요.\");\r\n");
      out.write("		          return;\r\n");
      out.write("		      }\r\n");
      out.write("\r\n");
      out.write("		      // AJAX 요청\r\n");
      out.write("		      $.ajax({\r\n");
      out.write("		          url: \"/post/cmtUpdate.kh\", // 댓글 수정 URL\r\n");
      out.write("		          method: \"POST\",\r\n");
      out.write("		          contentType: \"application/json\",\r\n");
      out.write("		          data: JSON.stringify({\r\n");
      out.write("		              commentNo: commentNo,\r\n");
      out.write("		              commentContent: newContent,\r\n");
      out.write("		              userNo: userNo\r\n");
      out.write("		          }),\r\n");
      out.write("		          success: function (response) {\r\n");
      out.write("		              if (response.success) {\r\n");
      out.write("		                  // 댓글 내용 업데이트\r\n");
      out.write("		                  const updatedHtml = '<strong>' + userNickname + '</strong>: ' + newContent;\r\n");
      out.write("		                  $commentDiv.find(\"p\").html(updatedHtml); // 닉네임과 수정된 댓글 내용 추가\r\n");
      out.write("\r\n");
      out.write("		                  // 수정 창 제거\r\n");
      out.write("		                  $commentDiv.find(\".edit-wrapper\").remove();\r\n");
      out.write("		              } else {\r\n");
      out.write("		                  alert(response.message);\r\n");
      out.write("		              }\r\n");
      out.write("		          },\r\n");
      out.write("		          error: function () {\r\n");
      out.write("		              alert(\"댓글 수정 중 오류가 발생했습니다.\");\r\n");
      out.write("		          }\r\n");
      out.write("		      });\r\n");
      out.write("		  });\r\n");
      out.write("\r\n");
      out.write("		  // 댓글 수정 취소\r\n");
      out.write("		  $(document).on(\"click\", \".cancel-edit\", function () {\r\n");
      out.write("		      const $commentDiv = $(this).closest(\".comment, .comment-reply\");\r\n");
      out.write("		      $commentDiv.find(\".edit-wrapper\").remove(); // 수정 창 제거\r\n");
      out.write("		  });\r\n");
      out.write("		 \r\n");
      out.write("			 //답글 취소\r\n");
      out.write("			    $(document).on(\"click\", \".cancel-reply\", function () {\r\n");
      out.write("			        currentParentNo = 0; // 부모 댓글 ID 초기화\r\n");
      out.write("			        $(\"#parentNo\").val(0); // 숨겨진 필드 초기화\r\n");
      out.write("	\r\n");
      out.write("		        // 답글 대상 숨기기\r\n");
      out.write("		        $(\".reply-target\").hide(); // 완전히 숨김\r\n");
      out.write("		        $(\"#reply-target-text\").text(\"\"); // 텍스트 초기화\r\n");
      out.write("		    });\r\n");
      out.write("	\r\n");
      out.write("		\r\n");
      out.write("			 // 게시글 좋아요 처리\r\n");
      out.write("			    function handlePostLike(postNo) {\r\n");
      out.write("			        $(document).on(\"click\", \".post-like\", function () {\r\n");
      out.write("			            const $btn = $(this);\r\n");
      out.write("			            const userNo = $btn.data(\"user-no\") || $(\"input[name='userNo']\").val();\r\n");
      out.write("			            const isLiked = $btn.data(\"liked\"); // 현재 좋아요 상태\r\n");
      out.write("			            const url = isLiked ? \"/post/postLikeDel.kh\" : \"/post/postLike.kh\";\r\n");
      out.write("\r\n");
      out.write("			            // 중복 요청 방지 플래그 확인\r\n");
      out.write("			            if ($btn.data(\"loading\")) return;\r\n");
      out.write("\r\n");
      out.write("			            if (!postNo || !userNo) {\r\n");
      out.write("			                console.error(\"[ERROR] postNo 또는 userNo가 누락되었습니다.\");\r\n");
      out.write("			                return;\r\n");
      out.write("			            }\r\n");
      out.write("\r\n");
      out.write("			            // 요청 중 플래그 설정\r\n");
      out.write("			            $btn.data(\"loading\", true);\r\n");
      out.write("\r\n");
      out.write("			            // 좋아요 등록/취소 AJAX 호출\r\n");
      out.write("			            $.ajax({\r\n");
      out.write("			                url: url,\r\n");
      out.write("			                type: \"GET\",\r\n");
      out.write("			                data: { targetNo: postNo, userNo: userNo, targetType: \"P\" },\r\n");
      out.write("			                success: function (response) {\r\n");
      out.write("			                    if (response === \"success\") {\r\n");
      out.write("			                        const likeCount = $btn.find(\".like-count\");\r\n");
      out.write("			                        const currentCount = parseInt(likeCount.text()) || 0;\r\n");
      out.write("\r\n");
      out.write("			                        // UI 업데이트\r\n");
      out.write("			                        if (isLiked) {\r\n");
      out.write("			                            likeCount.text(Math.max(currentCount - 1, 0));\r\n");
      out.write("			                        } else {\r\n");
      out.write("			                            likeCount.text(currentCount + 1);\r\n");
      out.write("			                        }\r\n");
      out.write("\r\n");
      out.write("			                        $btn.data(\"liked\", !isLiked); // 좋아요 상태 업데이트\r\n");
      out.write("			                        $btn.find(\"i\").toggleClass(\"fa-solid\", !isLiked).toggleClass(\"fa-regular\", isLiked);\r\n");
      out.write("			                    } else {\r\n");
      out.write("			                        alert(\"좋아요 업데이트에 실패했습니다.\");\r\n");
      out.write("			                    }\r\n");
      out.write("			                },\r\n");
      out.write("			                error: function () {\r\n");
      out.write("			                    console.error(\"[ERROR] 좋아요 등록/취소 AJAX 요청 실패\");\r\n");
      out.write("			                },\r\n");
      out.write("			                complete: function () {\r\n");
      out.write("			                    // 요청 완료 후 플래그 해제\r\n");
      out.write("			                    $btn.data(\"loading\", false);\r\n");
      out.write("			                },\r\n");
      out.write("			            });\r\n");
      out.write("			        });\r\n");
      out.write("			    }\r\n");
      out.write("\r\n");
      out.write("			 \r\n");
      out.write("			\r\n");
      out.write("			 \r\n");
      out.write("			// 게시글 좋아요 상태 초기화\r\n");
      out.write("			function loadPostLikeStatus(postNo) {\r\n");
      out.write("			    const $likeBtn = $(\".post-like\"); // 좋아요 버튼\r\n");
      out.write("			    const userNo = $(\"input[name='userNo']\").val(); // 로그인 사용자 ID\r\n");
      out.write("			\r\n");
      out.write("			    if (!postNo || !userNo) {\r\n");
      out.write("			        console.error(\"게시글 ID 또는 사용자 ID가 누락되었습니다.\");\r\n");
      out.write("			        return;\r\n");
      out.write("			    }\r\n");
      out.write("			\r\n");
      out.write("			    // 서버에서 좋아요 상태 확인\r\n");
      out.write("			    $.ajax({\r\n");
      out.write("			        url: \"/post/isLiked.kh\", // 서버에서 좋아요 상태 확인\r\n");
      out.write("			        type: \"GET\",\r\n");
      out.write("			        data: { targetNo: postNo, userNo: userNo, targetType: \"P\" }, // targetType: \"P\"는 게시글\r\n");
      out.write("			        success: function (isLikedResponse) {\r\n");
      out.write("			            const isLiked = isLikedResponse === \"true\"; // 서버 응답이 \"true\"일 경우 좋아요 상태\r\n");
      out.write("			            $likeBtn.data(\"liked\", isLiked); // 좋아요 상태를 data 속성에 저장\r\n");
      out.write("			            $likeBtn.attr(\"data-liked\", isLiked); // HTML 속성 업데이트\r\n");
      out.write("			\r\n");
      out.write("			            // 좋아요 상태에 따라 아이콘 클래스 설정\r\n");
      out.write("			            $likeBtn.find(\"i\")\r\n");
      out.write("			                .toggleClass(\"fa-solid\", isLiked) // 활성화 상태\r\n");
      out.write("			                .toggleClass(\"fa-regular\", !isLiked); // 비활성화 상태\r\n");
      out.write("			        },\r\n");
      out.write("			        error: function () {\r\n");
      out.write("			            console.error(\"좋아요 상태 초기화 실패\");\r\n");
      out.write("			        }\r\n");
      out.write("			    });\r\n");
      out.write("			\r\n");
      out.write("			    // 서버에서 좋아요 개수 확인\r\n");
      out.write("			    $.ajax({\r\n");
      out.write("			        url: \"/post/postlikeCnt.kh\", // 좋아요 개수 확인\r\n");
      out.write("			        type: \"GET\",\r\n");
      out.write("			        data: { targetNo: postNo },\r\n");
      out.write("			        success: function (likeCountResponse) {\r\n");
      out.write("			            const likeCount = parseInt(likeCountResponse) || 0;\r\n");
      out.write("			            $likeBtn.find(\".like-count\").text(likeCount); // 좋아요 개수 업데이트\r\n");
      out.write("			        },\r\n");
      out.write("			        error: function () {\r\n");
      out.write("			            console.error(\"좋아요 개수 초기화 실패\");\r\n");
      out.write("			        }\r\n");
      out.write("			    });\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("				\r\n");
      out.write("			  \r\n");
      out.write("				// 댓글 좋아요 처리						\r\n");
      out.write("				function handleCommentLike() {\r\n");
      out.write("					// 좋아요 버튼 클릭 이벤트 수정\r\n");
      out.write("					$(document).on(\"click\", \".comment-like\", function () {\r\n");
      out.write("					    const $btn = $(this);\r\n");
      out.write("					    const targetNo = $btn.data(\"id\"); // 댓글 또는 답글 고유 ID\r\n");
      out.write("					    const userNo = $(\"input[name='userNo']\").val();\r\n");
      out.write("					    const isLiked = $btn.data(\"liked\");\r\n");
      out.write("					    const url = isLiked ? \"/post/commentLikeDel.kh\" : \"/post/commentLike.kh\";\r\n");
      out.write("\r\n");
      out.write("					    $.ajax({\r\n");
      out.write("					        url: url,\r\n");
      out.write("					        type: \"GET\",\r\n");
      out.write("					        data: { targetNo: targetNo, userNo: userNo, targetType: \"C\" },\r\n");
      out.write("					        success: function (response) {\r\n");
      out.write("					            if (response === \"success\") {\r\n");
      out.write("					                const likeCount = $btn.find(\".like-count\");\r\n");
      out.write("					                const currentCount = parseInt(likeCount.text()) || 0;\r\n");
      out.write("					                const newCount = isLiked ? Math.max(currentCount - 1, 0) : currentCount + 1;\r\n");
      out.write("\r\n");
      out.write("					                // 좋아요 상태 및 UI 업데이트\r\n");
      out.write("					                $btn.data(\"liked\", !isLiked);\r\n");
      out.write("					                $btn.attr(\"data-liked\", !isLiked); // DOM 속성 업데이트\r\n");
      out.write("					                $btn.find(\"i\").toggleClass(\"fa-solid\", !isLiked).toggleClass(\"fa-regular\", isLiked);\r\n");
      out.write("					                likeCount.text(newCount);\r\n");
      out.write("					            } else {\r\n");
      out.write("					                alert(\"좋아요 처리 실패\");\r\n");
      out.write("					            }\r\n");
      out.write("					        },\r\n");
      out.write("					        error: function () {\r\n");
      out.write("					            console.error(\"좋아요 요청 실패\");\r\n");
      out.write("					        }\r\n");
      out.write("					    });\r\n");
      out.write("					});\r\n");
      out.write("\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("			// 댓글 좋아요 상태 및 개수 초기화\r\n");
      out.write("			function updateCommentLikeStatus() {\r\n");
      out.write("			    $(\".comment-like\").each(function () {\r\n");
      out.write("			        const $btn = $(this);\r\n");
      out.write("			        const commentNo = $btn.data(\"id\"); // 댓글/답글 고유 ID\r\n");
      out.write("			        const userNo = $(\"input[name='userNo']\").val();\r\n");
      out.write("			\r\n");
      out.write("			        if (!commentNo || !userNo) return;\r\n");
      out.write("			\r\n");
      out.write("			        // 서버에서 개별 좋아요 상태 확인\r\n");
      out.write("			        $.ajax({\r\n");
      out.write("			            url: \"/post/isLiked.kh\",\r\n");
      out.write("			            type: \"GET\",\r\n");
      out.write("			            data: { targetNo: commentNo, userNo: userNo, targetType: \"C\" },\r\n");
      out.write("			            success: function (isLikedResponse) {\r\n");
      out.write("			                const isLiked = isLikedResponse === \"true\";\r\n");
      out.write("			\r\n");
      out.write("			                // 좋아요 상태 및 UI 업데이트\r\n");
      out.write("			                $btn.data(\"liked\", isLiked);\r\n");
      out.write("			                $btn.attr(\"data-liked\", isLiked);\r\n");
      out.write("			                $btn.find(\"i\").toggleClass(\"fa-solid\", isLiked).toggleClass(\"fa-regular\", !isLiked);\r\n");
      out.write("			            },\r\n");
      out.write("			            error: function () {\r\n");
      out.write("			                console.error(\"[ERROR] 좋아요 상태 초기화 실패\");\r\n");
      out.write("			            }\r\n");
      out.write("			        });\r\n");
      out.write("			\r\n");
      out.write("			        // 서버에서 좋아요 개수 확인\r\n");
      out.write("			        $.ajax({\r\n");
      out.write("			            url: \"/post/commentLikeCnt.kh\",\r\n");
      out.write("			            type: \"GET\",\r\n");
      out.write("			            data: { targetNo: commentNo },\r\n");
      out.write("			            success: function (likeCountResponse) {\r\n");
      out.write("			                const likeCount = parseInt(likeCountResponse) || 0;\r\n");
      out.write("			                $btn.find(\".like-count\").text(likeCount); // 좋아요 개수 업데이트\r\n");
      out.write("			            },\r\n");
      out.write("			            error: function () {\r\n");
      out.write("			                console.error(\"[ERROR] 좋아요 개수 초기화 실패\");\r\n");
      out.write("			            }\r\n");
      out.write("			        });\r\n");
      out.write("			    });\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	 \r\n");
      out.write("		    // 포스트 조회 닫기\r\n");
      out.write("		    $(\".modal-close\").on(\"click\", function () {\r\n");
      out.write("		        $(\".modal\").css(\"display\", \"none\");\r\n");
      out.write("		    });\r\n");
      out.write("	\r\n");
      out.write("		    \r\n");
      out.write("		});	\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("	    \r\n");
      out.write("	     \r\n");
      out.write("	    			    \r\n");
      out.write("	</main>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("/* 오른쪽 사이드 메뉴 스타일 */\r\n");
      out.write(".right-menu {\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    top: 0;\r\n");
      out.write("    right: 0;\r\n");
      out.write("    width: 300px; /* 원하는 너비로 조정 */\r\n");
      out.write("    height: 100%;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border-left: 1px solid #ddd; /* 메인 콘텐츠와 구분을 위해 왼쪽에 경계선 추가 */\r\n");
      out.write("    background-color: #fff; /* 배경색 설정 */\r\n");
      out.write("    overflow-y: auto; /* 내용이 넘칠 경우 스크롤 */\r\n");
      out.write("    z-index: 100; /* 다른 요소보다 위에 표시 */\r\n");
      out.write("}\r\n");
      out.write("/* 간단한 스타일 추가 */\r\n");
      out.write(".right-menu {\r\n");
      out.write("    width: 300px;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border: 1px solid #ddd;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".re-friend-container, .family-container {\r\n");
      out.write("    margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-container-title, .family-container-title {\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    margin-bottom: 10px;\r\n");
      out.write("    text-align: center; /* 가운데 정렬 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-list, .family-list {\r\n");
      out.write("    list-style: none;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-item, .family-item {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    padding: 5px 0;\r\n");
      out.write("    border-bottom: 1px solid #eee;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-item:last-child, .family-item:last-child {\r\n");
      out.write("    border-bottom: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".profile-img {\r\n");
      out.write("    width: 50px;\r\n");
      out.write("    height: 50px;\r\n");
      out.write("    border-radius: 50%;\r\n");
      out.write("    object-fit: cover;\r\n");
      out.write("    margin-right: 10px;\r\n");
      out.write("    border: 1px solid gray;\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".recommendation-info, .family-info {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".username {\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pet-info {\r\n");
      out.write("    font-size: 0.9em;\r\n");
      out.write("    color: #666;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".follow-btn, .unfollow-btn {\r\n");
      out.write("    display: inline-block; /* 버튼 크기 강제 적용 */\r\n");
      out.write("    padding: 5px 10px; /* 내부 여백 */\r\n");
      out.write("    width: 80px; /* 버튼 너비 고정 */\r\n");
      out.write("    height: 32px; /* 버튼 높이 고정 */\r\n");
      out.write("    line-height: 25px; /* 텍스트 수직 정렬 */\r\n");
      out.write("    text-align: center; /* 텍스트 수평 정렬 */\r\n");
      out.write("    color: white;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 3px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    box-sizing: border-box; /* 패딩과 높이 계산 포함 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".follow-btn {\r\n");
      out.write("    background-color: #FF8383;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".unfollow-btn {\r\n");
      out.write("    background-color: gray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#loadingSpinner {\r\n");
      out.write("    display: none;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-item-content, .family-item-content {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<link rel =\"stylesheet\"  href=\"/resources/default.css\">\r\n");
      out.write("<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <aside class=\"right-menu\">\r\n");
      out.write("    	");
      if (_jspx_meth_c_005fchoose_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    </aside>\r\n");
      out.write("    <script>\r\n");
      out.write("    $(document).ready(function(){\r\n");
      out.write("        // 이벤트 위임\r\n");
      out.write("        $(document).on(\"click\", \".follow-toggle\", function(){\r\n");
      out.write("            var $btn = $(this);\r\n");
      out.write("            var userId = $btn.data(\"userid\");       // 상대방 아이디\r\n");
      out.write("            var isFollowing = $btn.data(\"following\"); // true/false\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: '/follow/follow.kh',        // 실제 컨트롤러 매핑 URL\r\n");
      out.write("                type: 'POST',\r\n");
      out.write("                dataType: 'json',\r\n");
      out.write("                data: {\r\n");
      out.write("                    userId: userId,\r\n");
      out.write("                    action: isFollowing ? 'unfollow' : 'follow'\r\n");
      out.write("                },\r\n");
      out.write("                success: function(response){\r\n");
      out.write("                    // 예: response = { success: true/false, isFollowing: true/false, isMutualFollow: true/false, ... }\r\n");
      out.write("                    if(response.success){\r\n");
      out.write("                        // 이미 팔로우중 -> 언팔 성공\r\n");
      out.write("                        if(response.isFollowing){\r\n");
      out.write("                            // 맞팔 여부에 따라 텍스트가 다를 수 있음\r\n");
      out.write("                            // 예: response.isMutualFollow ? '언팔로우' : '언팔로우'\r\n");
      out.write("                            $btn.text('언팔로우').data('following', true).removeClass('follow-btn').addClass('unfollow-btn');\r\n");
      out.write("                        } else {\r\n");
      out.write("                            // 팔로우 상태 아님 -> 팔로우 버튼으로\r\n");
      out.write("                            $btn.text('팔로우').data('following', false).removeClass('unfollow-btn').addClass('follow-btn');\r\n");
      out.write("                        }\r\n");
      out.write("                        // 1) 만약 Controller 응답에 followerCount / followingCount가 있으면\r\n");
      out.write("                        //    아래처럼 DOM을 업데이트\r\n");
      out.write("                        if(response.followerCount !== undefined){\r\n");
      out.write("                            $(\".followerCountSpan\").text(response.followerCount);\r\n");
      out.write("                        }\r\n");
      out.write("                        if(response.followingCount !== undefined){\r\n");
      out.write("                            $(\".followingCountSpan\").text(response.followingCount);\r\n");
      out.write("                        }\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(\"팔로우/언팔로우 처리 실패: \" + (response.message || ''));\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(){\r\n");
      out.write("                    console.log(\"AJAX error!\");\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	$(document).ready(function() {\r\n");
      out.write("	    // 메시지 버튼 클릭 이벤트\r\n");
      out.write("	    $(\".message-btn\").on(\"click\", function(event) {\r\n");
      out.write("		    event.preventDefault(); // 기본 링크 동작 방지\r\n");
      out.write("		    var targetUserId = $(this).data(\"userid\");\r\n");
      out.write("		    $.ajax({\r\n");
      out.write("		        url: '/chat/startChat.kh',\r\n");
      out.write("		        type: 'GET',\r\n");
      out.write("		        data: { userId: targetUserId },\r\n");
      out.write("		        success: function(response) {\r\n");
      out.write("		            if (response.success) {\r\n");
      out.write("		                window.location.href = '/chat/chatRoom.kh?roomId=' + response.roomId;\r\n");
      out.write("		            } else {\r\n");
      out.write("		                alert('채팅방 생성에 실패했습니다: ' + (response.message || ''));\r\n");
      out.write("		            }\r\n");
      out.write("		        },\r\n");
      out.write("		        error: function() {\r\n");
      out.write("		            alert('서버 오류가 발생했습니다.');\r\n");
      out.write("		        }\r\n");
      out.write("		    });\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	    // 팔로우/언팔로우 버튼 클릭 이벤트\r\n");
      out.write("	    $(\".follow-event\").on(\"click\", function() {\r\n");
      out.write("	        var $btn = $(this);\r\n");
      out.write("	        var userId = $btn.data(\"userid\");\r\n");
      out.write("	        var isFollowing = $btn.data(\"following\");\r\n");
      out.write("\r\n");
      out.write("	        $.ajax({\r\n");
      out.write("	            url: '/follow/follow.kh', // 실제 컨트롤러 매핑 URL\r\n");
      out.write("	            type: 'POST',\r\n");
      out.write("	            dataType: 'json',\r\n");
      out.write("	            data: {\r\n");
      out.write("	                userId: userId,\r\n");
      out.write("	                action: isFollowing ? 'unfollow' : 'follow' // 팔로우/언팔로우 액션\r\n");
      out.write("	            },\r\n");
      out.write("	            success: function(response) {\r\n");
      out.write("	                if (response.success) {\r\n");
      out.write("	                    // 버튼 상태 업데이트\r\n");
      out.write("	                    if (response.isFollowing) {\r\n");
      out.write("	                        $btn.text('언팔로우').data('following', true).removeClass('user-follow-btn').addClass('user-unfollow-btn');\r\n");
      out.write("	                    } else {\r\n");
      out.write("	                        $btn.text('팔로우').data('following', false).removeClass('user-unfollow-btn').addClass('user-follow-btn');\r\n");
      out.write("	                    }\r\n");
      out.write("	                    // 카운트 업데이트\r\n");
      out.write("	                    if (response.followerCount !== undefined) {\r\n");
      out.write("	                        $(\".followerCountSpan\").text(response.followerCount);\r\n");
      out.write("	                    }\r\n");
      out.write("	                    if (response.followingCount !== undefined) {\r\n");
      out.write("	                        $(\".followingCountSpan\").text(response.followingCount);\r\n");
      out.write("	                    }\r\n");
      out.write("	                } else {\r\n");
      out.write("	                    alert(\"팔로우/언팔로우 처리 실패: \" + (response.message || ''));\r\n");
      out.write("	                }\r\n");
      out.write("	            },\r\n");
      out.write("	            error: function() {\r\n");
      out.write("	                console.log(\"AJAX error!\");\r\n");
      out.write("	            }\r\n");
      out.write("	        });\r\n");
      out.write("	    });\r\n");
      out.write("	});\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fif_005f0.setParent(null);
    // /WEB-INF/views/member/sideMenu.jsp(41,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.acctLevel > 0}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
    if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("					<div class=\"one-menu\">\r\n");
        out.write("                    	<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
        out.write("                    <a href=\"/story/modalTest.kh\" class=\"menu-link\">신고 내역</a>\r\n");
        out.write("                </div>\r\n");
        out.write("				");
        int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f0.setParent(null);
    int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
    if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("							  ");
        out.write("\r\n");
        out.write("							");
        if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("\r\n");
        out.write("							");
        out.write("\r\n");
        out.write("							");
        if (_jspx_meth_c_005fwhen_005f1(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("\r\n");
        out.write("							 ");
        out.write("\r\n");
        out.write("							");
        if (_jspx_meth_c_005fwhen_005f2(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("\r\n");
        out.write("							 ");
        out.write("\r\n");
        out.write("							");
        if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("						");
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /WEB-INF/views/member/userProfile.jsp(59,7) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${myFollowCount > 0 && theyFollowCount > 0}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
    if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("								<!-- 서로 팔로우 상태 -> '언팔로우' 버튼 표기 -->\r\n");
        out.write("								<a href=\"javascript:void(0)\" class=\"follow-event user-unfollow-btn\"\r\n");
        out.write("									data-userid=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" data-following=\"true\"> 언팔로우\r\n");
        out.write("								</a>\r\n");
        out.write("								<a href=\"/chat/startChat.kh?userId=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" class=\"message-btn\" data-userid=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\">메시지</a>\r\n");
        out.write("							");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f1 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /WEB-INF/views/member/userProfile.jsp(68,7) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${myFollowCount > 0 && theyFollowCount == 0}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f1 = _jspx_th_c_005fwhen_005f1.doStartTag();
    if (_jspx_eval_c_005fwhen_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("								<!-- 문구는 '언팔로우'로 표시(일방 팔로우) -->\r\n");
        out.write("								<a href=\"javascript:void(0)\" class=\"follow-event user-unfollow-btn\"\r\n");
        out.write("									data-userid=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" data-following=\"true\"> 언팔로우\r\n");
        out.write("								</a>\r\n");
        out.write("							");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f1.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f2 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /WEB-INF/views/member/userProfile.jsp(76,7) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${myFollowCount == 0 && theyFollowCount > 0}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f2 = _jspx_th_c_005fwhen_005f2.doStartTag();
    if (_jspx_eval_c_005fwhen_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("								<!-- 이 경우엔 '맞팔로우' 같은 문구를 쓸 수도 있음 -->\r\n");
        out.write("								<a href=\"javascript:void(0)\" class=\"follow-event user-follow-btn\"\r\n");
        out.write("									data-userid=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" data-following=\"false\"> 맞팔로우\r\n");
        out.write("								</a>\r\n");
        out.write("							");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f2.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f2);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f2, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("								<a href=\"javascript:void(0)\" class=\"follow-event user-follow-btn\"\r\n");
        out.write("									data-userid=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" data-following=\"false\"> 팔로우\r\n");
        out.write("								</a>\r\n");
        out.write("							");
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f0.setParent(null);
    // /WEB-INF/views/member/userProfile.jsp(97,6) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVar("post");
    // /WEB-INF/views/member/userProfile.jsp(97,6) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/member/userProfile.jsp(97,6) '${post}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${post}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
      if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("	   			<div class=\"post-grid\">\r\n");
          out.write("	   				<img src=\"/resources/post_file/");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${post.postFileName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" alt=\"thumbnail\" class=\"feed-thumbnail\">\r\n");
          out.write("	   				<p class=\"hidden-post-content\" style=\"display: none;\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${post.postContent}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</p>\r\n");
          out.write("	   			</div>\r\n");
          out.write("	   		");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f0.doFinally();
    }
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f1 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f1.setParent(null);
    int _jspx_eval_c_005fchoose_005f1 = _jspx_th_c_005fchoose_005f1.doStartTag();
    if (_jspx_eval_c_005fchoose_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("    		");
        if (_jspx_meth_c_005fwhen_005f3(_jspx_th_c_005fchoose_005f1, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("    		");
        if (_jspx_meth_c_005fotherwise_005f2(_jspx_th_c_005fchoose_005f1, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("    	");
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f1.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f1);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f3 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f3.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
    // /WEB-INF/views/member/rightSideMenu.jsp(122,6) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f3.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty mypetList}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f3 = _jspx_th_c_005fwhen_005f3.doStartTag();
    if (_jspx_eval_c_005fwhen_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("    			<div class=\"family-container\">\r\n");
        out.write("    				<div class=\"family-container-title\">\r\n");
        out.write("						<span>");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("의 가족을 소개합니다</span>    				\r\n");
        out.write("    				</div>\r\n");
        out.write("    				<ul class=\"family-list\">\r\n");
        out.write("    					");
        if (_jspx_meth_c_005fforEach_005f1(_jspx_th_c_005fwhen_005f3, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("    				</ul>\r\n");
        out.write("    			</div>\r\n");
        out.write("    		");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f3.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f3);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f3, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fwhen_005f3, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fwhen_005f3);
    // /WEB-INF/views/member/rightSideMenu.jsp(128,9) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f1.setVar("mypet");
    // /WEB-INF/views/member/rightSideMenu.jsp(128,9) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/member/rightSideMenu.jsp(128,9) '${mypetList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${mypetList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
      if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("    						<li class=\"family-item\">\r\n");
          out.write("    							<div class=\"family-item-content\">\r\n");
          out.write("	    							<img class=\"profile-img\" alt=\"\" src=\"/resources/css_image/");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write(".png\">\r\n");
          out.write("	    							<div class=\"family-info\">\r\n");
          out.write("	    								<span class=\"username\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</span>\r\n");
          out.write("	    								<span class=\"pet-info\"> \r\n");
          out.write("		                                    ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.breedType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\r\n");
          out.write("			                           </span>\r\n");
          out.write("	    							</div>\r\n");
          out.write("    							</div>\r\n");
          out.write("    							<div class=\"petGender-img\">\r\n");
          out.write("		                            ");
          if (_jspx_meth_c_005fchoose_005f2(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
            return true;
          out.write("\r\n");
          out.write("		                        </div>\r\n");
          out.write("    						</li>\r\n");
          out.write("    					");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f1.doFinally();
    }
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f2 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
    int _jspx_eval_c_005fchoose_005f2 = _jspx_th_c_005fchoose_005f2.doStartTag();
    if (_jspx_eval_c_005fchoose_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("                                        ");
        if (_jspx_meth_c_005fwhen_005f4(_jspx_th_c_005fchoose_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
          return true;
        out.write("\r\n");
        out.write("                                        ");
        if (_jspx_meth_c_005fwhen_005f5(_jspx_th_c_005fchoose_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
          return true;
        out.write("\r\n");
        out.write("                                        ");
        if (_jspx_meth_c_005fotherwise_005f1(_jspx_th_c_005fchoose_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
          return true;
        out.write("\r\n");
        out.write("                                    ");
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f2.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f2);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f2, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f4(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f4 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f4.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
    // /WEB-INF/views/member/rightSideMenu.jsp(141,40) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f4.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petGender == 'M'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f4 = _jspx_th_c_005fwhen_005f4.doStartTag();
    if (_jspx_eval_c_005fwhen_005f4 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("                                        	<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"skyblue\" class=\"bi bi-gender-male\" viewBox=\"0 0 16 16\">\r\n");
        out.write("											  <path fill-rule=\"evenodd\" d=\"M9.5 2a.5.5 0 0 1 0-1h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0V2.707L9.871 6.836a5 5 0 1 1-.707-.707L13.293 2zM6 6a4 4 0 1 0 0 8 4 4 0 0 0 0-8\"/>\r\n");
        out.write("											</svg>\r\n");
        out.write("                                        ");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f4.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f4);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f4, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f5(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f5 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f5.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f5.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
    // /WEB-INF/views/member/rightSideMenu.jsp(146,40) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f5.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petGender == 'F'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f5 = _jspx_th_c_005fwhen_005f5.doStartTag();
    if (_jspx_eval_c_005fwhen_005f5 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("                                        	<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"#ff94c7\" class=\"bi bi-gender-female\" viewBox=\"0 0 16 16\">\r\n");
        out.write("											  <path fill-rule=\"evenodd\" d=\"M8 1a4 4 0 1 0 0 8 4 4 0 0 0 0-8M3 5a5 5 0 1 1 5.5 4.975V12h2a.5.5 0 0 1 0 1h-2v2.5a.5.5 0 0 1-1 0V13h-2a.5.5 0 0 1 0-1h2V9.975A5 5 0 0 1 3 5\"/>\r\n");
        out.write("											</svg>\r\n");
        out.write("                                        ");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f5.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f5);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f5, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f1 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
    int _jspx_eval_c_005fotherwise_005f1 = _jspx_th_c_005fotherwise_005f1.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petGender}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f1.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f1);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f2 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
    int _jspx_eval_c_005fotherwise_005f2 = _jspx_th_c_005fotherwise_005f2.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("    			<div class=\"re-friend-container\">\r\n");
        out.write("		            <div class=\"friend-container-title\">\r\n");
        out.write("		                <span>같은 동물 키우는 사람, 여기 있어요!</span>\r\n");
        out.write("		            </div>\r\n");
        out.write("		            <ul class=\"friend-list\">\r\n");
        out.write("		                ");
        if (_jspx_meth_c_005fforEach_005f2(_jspx_th_c_005fotherwise_005f2, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("		            </ul>\r\n");
        out.write("		        </div>\r\n");
        out.write("    		");
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f2.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f2);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f2, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fotherwise_005f2, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f2 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fotherwise_005f2);
    // /WEB-INF/views/member/rightSideMenu.jsp(165,18) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f2.setVar("friend");
    // /WEB-INF/views/member/rightSideMenu.jsp(165,18) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f2.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/member/rightSideMenu.jsp(165,18) '${friendList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${friendList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int[] _jspx_push_body_count_c_005fforEach_005f2 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f2 = _jspx_th_c_005fforEach_005f2.doStartTag();
      if (_jspx_eval_c_005fforEach_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("		                    <li class=\"friend-item\">\r\n");
          out.write("		                        <div class=\"friend-item-content\">\r\n");
          out.write("		                            <img class=\"profile-img\" src=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty friend.userImage ? friend.userImage : '/resources/profile_file/default_profile.png'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\"alt=\"프로필 이미지\" />\r\n");
          out.write("		                            <div class=\"recommendation-info\">\r\n");
          out.write("		                                <span class=\"username\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.userNickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</span>\r\n");
          out.write("		                                <span class=\"pet-info\"> \r\n");
          out.write("		                                    ");
          if (_jspx_meth_c_005fchoose_005f3(_jspx_th_c_005fforEach_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f2))
            return true;
          out.write(' ');
          out.write('-');
          out.write(' ');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.breedType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\r\n");
          out.write("		                                </span>\r\n");
          out.write("		                            </div>                        \r\n");
          out.write("		                        </div>\r\n");
          out.write("		                        <div>\r\n");
          out.write("		                            <a href=\"javascript:void(0)\" class=\"follow-toggle ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.following ? 'unfollow-btn' : 'follow-btn'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" \r\n");
          out.write("		                                    data-userid=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" data-following=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.following}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\">\r\n");
          out.write("		                                ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.following ? '언팔로우' : '팔로우'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\r\n");
          out.write("		                            </a>\r\n");
          out.write("		                        </div>\r\n");
          out.write("		                    </li>\r\n");
          out.write("		                ");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f2[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f2.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f2.doFinally();
    }
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f2);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f2, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f2)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f3 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f3.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f2);
    int _jspx_eval_c_005fchoose_005f3 = _jspx_th_c_005fchoose_005f3.doStartTag();
    if (_jspx_eval_c_005fchoose_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("		                                        ");
        if (_jspx_meth_c_005fwhen_005f6(_jspx_th_c_005fchoose_005f3, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f2))
          return true;
        out.write("\r\n");
        out.write("		                                        ");
        if (_jspx_meth_c_005fwhen_005f7(_jspx_th_c_005fchoose_005f3, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f2))
          return true;
        out.write("\r\n");
        out.write("		                                        ");
        if (_jspx_meth_c_005fotherwise_005f3(_jspx_th_c_005fchoose_005f3, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f2))
          return true;
        out.write("\r\n");
        out.write("		                                    ");
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f3.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f3);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f3, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f6(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f3, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f2)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f6 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f6.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f6.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f3);
    // /WEB-INF/views/member/rightSideMenu.jsp(173,42) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f6.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.petType == 'DOG'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f6 = _jspx_th_c_005fwhen_005f6.doStartTag();
    if (_jspx_eval_c_005fwhen_005f6 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write('강');
        out.write('아');
        out.write('지');
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f6.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f6);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f6, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f7(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f3, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f2)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f7 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f7.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f7.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f3);
    // /WEB-INF/views/member/rightSideMenu.jsp(174,42) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f7.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.petType == 'CAT'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f7 = _jspx_th_c_005fwhen_005f7.doStartTag();
    if (_jspx_eval_c_005fwhen_005f7 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write('고');
        out.write('양');
        out.write('이');
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f7.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f7);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f7, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f3, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f2)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f3 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f3.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f3);
    int _jspx_eval_c_005fotherwise_005f3 = _jspx_th_c_005fotherwise_005f3.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.petType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f3.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f3);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f3, _jsp_getInstanceManager());
    return false;
  }
}
