/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2025-01-09 06:14:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mainFeed_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1733127990249L));
    _jspx_dependants.put("/WEB-INF/views/member/story.jsp", Long.valueOf(1736382410481L));
    _jspx_dependants.put("/WEB-INF/views/member/sideMenu.jsp", Long.valueOf(1736382410481L));
    _jspx_dependants.put("/WEB-INF/views/member/rightSideMenu.jsp", Long.valueOf(1736317703488L));
    _jspx_dependants.put("jar:file:/C:/spring-workspace/final_git/src/main/webapp/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Main Feed</title>\r\n");
      out.write("\r\n");
      out.write("<link rel =\"stylesheet\"  href=\"/resources/default.css\"  >\r\n");
      out.write("<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("/* 가운데 정렬이 안되서 width값 1200으로 고정시킴 */\r\n");
      out.write(".main-feed-container {\r\n");
      out.write("  width: 55vw;\r\n");
      out.write("}\r\n");
      out.write("/* 전체 카드 감싸는 컨테이너 */\r\n");
      out.write(".main-post-container {\r\n");
      out.write("  width: 500px;                /* 카드 전체 폭 예시 */\r\n");
      out.write("  margin: 32px auto 0;\r\n");
      out.write("  border: 1px solid #ccc;      /* 테두리 */\r\n");
      out.write("  border-radius: 6px;          /* 모서리 살짝 둥글게 */\r\n");
      out.write("  box-sizing: border-box;\r\n");
      out.write("  background-color: #fff;\r\n");
      out.write("  overflow: hidden;            /* 내부 요소가 삐져나가지 않도록 */\r\n");
      out.write("  font-family: sans-serif;     /* 폰트 예시 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 헤더 영역: 프로필사진, 닉네임, 작성일, 우측 옵션버튼(...) */\r\n");
      out.write(".main-feed-header {\r\n");
      out.write("  display: flex;\r\n");
      out.write("  justify-content: space-between;\r\n");
      out.write("  align-items: center;\r\n");
      out.write("  padding: 8px;               /* 헤더 안쪽 여백 */\r\n");
      out.write("}\r\n");
      out.write(".header-left-user{\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 왼쪽: 프로필 사진 + 닉네임 + 작성일 */\r\n");
      out.write(".main-feed-header-left {\r\n");
      out.write("  display: flex;          /* 가로 배치 */\r\n");
      out.write("  align-items: center;    /* 세로 가운데 정렬 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 프로필 사진 틀(원형) */\r\n");
      out.write(".main-feed-header-left-img {\r\n");
      out.write("  width: 40px;                /* 프로필 이미지 크기 */\r\n");
      out.write("  height: 40px;\r\n");
      out.write("  margin-right: 8px;\r\n");
      out.write("  border-radius: 50%;         /* 원형 */\r\n");
      out.write("  overflow: hidden;           /* 이미지가 원형에 맞게 잘리도록 */\r\n");
      out.write("  background-color: #eee;     /* 실제 이미지 없을 때 배경 표시용 */\r\n");
      out.write("  border: 1px solid gray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 프로필 이미지 실제 적용 */\r\n");
      out.write(".main-feed-header-left-img img {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  height: 100%;\r\n");
      out.write("  object-fit: cover;          /* 이미지가 영역에 꽉 차도록 */\r\n");
      out.write("}\r\n");
      out.write(".hearder-left-user{\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("/* 닉네임 */\r\n");
      out.write(".main-feed-header-left-nickname {\r\n");
      out.write("  font-weight: bold;\r\n");
      out.write("  font-size: 18px;\r\n");
      out.write("  margin-right: 4px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 작성일 */\r\n");
      out.write(".main-feed-header-left-postDate {\r\n");
      out.write("  font-size: 1rem;\r\n");
      out.write("  color: #666;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 오른쪽: 점세개(...) */\r\n");
      out.write(".main-feed-header-right {\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 게시물 이미지 영역 */\r\n");
      out.write(".main-feed-content {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  border-top: 1px solid #ccc;\r\n");
      out.write("  border-bottom: 1px solid #ccc;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".main-feed-content-img img {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  display: block;\r\n");
      out.write("  object-fit: cover;          /* 필요한 경우, 이미지 비율 유지하면서 꽉 채울 때 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 푸터 전체 */\r\n");
      out.write(".main-feed-footer {\r\n");
      out.write("  padding: 8px;               /* 좋아요, 댓글, 북마크, 텍스트 부분 */\r\n");
      out.write("  position: relative;         /* float 요소 배치를 좀 더 직관적으로 조정 가능 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 좋아요/댓글 아이콘 영역(왼쪽) + 북마크 영역(오른쪽) */\r\n");
      out.write(".main-feed-footer-left {\r\n");
      out.write("  display: flex;              /* 가로로 나란히 */\r\n");
      out.write("  align-items: center;        /* 세로 정렬 */\r\n");
      out.write("  gap: 8px;                   /* 아이콘 간격 */\r\n");
      out.write("  float: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".main-feed-footer-right {\r\n");
      out.write("  display: flex;\r\n");
      out.write("  align-items: center;\r\n");
      out.write("  float: right;               /* 오른쪽 배치 */\r\n");
      out.write("}\r\n");
      out.write(".all-comment{\r\n");
      out.write("	display: flex;\r\n");
      out.write("	margin-bottom: 8px;\r\n");
      out.write("}\r\n");
      out.write("/* 아이콘 자체 스타일 (여백 등) */\r\n");
      out.write(".main-feed-like,\r\n");
      out.write(".main-feed-comment,\r\n");
      out.write(".main-feed-bookmark {\r\n");
      out.write("  margin-right: 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* float 해제용 (BFC) */\r\n");
      out.write(".main-feed-footer::after {\r\n");
      out.write("  content: \"\";\r\n");
      out.write("  display: block;\r\n");
      out.write("  clear: both;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 좋아요 개수를 새 줄에 배치 */\r\n");
      out.write(".main-feed-footer-likeCount {\r\n");
      out.write("  display: block;   /* 블록화 */\r\n");
      out.write("  clear: both;      /* 위 float된 요소들 아래로 */\r\n");
      out.write("  margin-top: 8px;  /* 간격 */\r\n");
      out.write("  font-weight: 500; /* 예시로 약간 볼드하게 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 닉네임 + 내용 부분 */\r\n");
      out.write(".main-feed-content-text {\r\n");
      out.write("  margin-top: 6px;            /* '좋아요 개수' 아래로 약간 여백 */\r\n");
      out.write("  font-size: 0.95rem;\r\n");
      out.write("  line-height: 1.4;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".main-feed-content-text span:first-child {\r\n");
      out.write("  font-weight: bold;          /* 닉네임 볼드 처리 */\r\n");
      out.write("  margin-right: 6px;\r\n");
      out.write("  margin-bottom: 6px;\r\n");
      out.write("}\r\n");
      out.write(".user-comment{\r\n");
      out.write("	margin-bottom: 6px;\r\n");
      out.write("	font-size: 0.95rem;\r\n");
      out.write("	line-height: 1.4;\r\n");
      out.write("}\r\n");
      out.write(".main-feed-like svg {\r\n");
      out.write("  display: flex;          /* 링크 자체가 flex 컨테이너가 되도록 */\r\n");
      out.write("  align-items: center;    /* 내부 SVG를 수직 중앙 정렬 */\r\n");
      out.write("  justify-content: center; /* 필요하면 수평도 가운데 정렬 */\r\n");
      out.write("}\r\n");
      out.write("/* 로딩 스피너 스타일 */\r\n");
      out.write("#loading {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	display: none; /* 기본적으로 숨김 */\r\n");
      out.write("}\r\n");
      out.write("#loading i {\r\n");
      out.write("	font-size: 24px;\r\n");
      out.write("	color: #555;\r\n");
      out.write("}\r\n");
      out.write(".comment-input{\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* ===========신고 모달============ */\r\n");
      out.write(".report-modal-content {\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    top: 50%;\r\n");
      out.write("    left: 50%;\r\n");
      out.write("    transform: translate(-50%, -50%);\r\n");
      out.write("    width: 400px;\r\n");
      out.write("    background: white;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    border-radius: 10px;\r\n");
      out.write("    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n");
      out.write("    display: flex;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("    gap: 20px;\r\n");
      out.write("}\r\n");
      out.write(".report-header h2 {\r\n");
      out.write("    font-size: 18px;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("}\r\n");
      out.write(".report-reason label {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    gap: 5px;\r\n");
      out.write("    font-size: 15px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write(".report-reason {\r\n");
      out.write("    display: grid;\r\n");
      out.write("    grid-template-columns: 1fr 1fr; /* 2열로 정렬 */\r\n");
      out.write("    gap: 10px;\r\n");
      out.write("}\r\n");
      out.write(".reportRadio{\r\n");
      out.write("    width: 10px;\r\n");
      out.write("    height: 10px;\r\n");
      out.write("    margin-right: 5px;\r\n");
      out.write("}\r\n");
      out.write(".report-footer {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-around;\r\n");
      out.write("    gap: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".report-footer .btn {\r\n");
      out.write("    padding: 10px 20px;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    border: none;\r\n");
      out.write("}\r\n");
      out.write(".btn-delete {\r\n");
      out.write("    background-color: #f7d3d3;\r\n");
      out.write("    color: #a33;\r\n");
      out.write("}\r\n");
      out.write(".btn-delete:hover {\r\n");
      out.write("    background-color: #f5bcbc;\r\n");
      out.write("}\r\n");
      out.write(".cancel-btn {\r\n");
      out.write("    background-color: #ccc;\r\n");
      out.write("}\r\n");
      out.write(".cancel-btn:hover {\r\n");
      out.write("    background-color: #bbb;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 좋아요 버튼 기본 스타일 */\r\n");
      out.write(".post-like svg {\r\n");
      out.write("  fill: gray; /* 기본 색상 */\r\n");
      out.write("  transition: fill 0.3s ease; /* 색상 변화 효과 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* 좋아요 활성화 상태 */\r\n");
      out.write(".post-like[data-liked=\"true\"] svg {\r\n");
      out.write("  fill: red; /* 좋아요 활성화 상태 색상 */\r\n");
      out.write("  transform: scale(1.2); /* 약간 커지는 효과 */\r\n");
      out.write("  transition: transform 0.2s ease, fill 0.2s ease; /* 크기와 색상 변화 효과 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 좋아요 비활성화 상태 */\r\n");
      out.write(".post-like[data-liked=\"false\"] svg {\r\n");
      out.write("  fill: gray; /* 비활성화 상태 색상 */\r\n");
      out.write("  transform: scale(1); /* 원래 크기 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	\r\n");
      out.write("		<nav class=\"side-menu\">\r\n");
      out.write("			<div class=\"nav-logo\">\r\n");
      out.write("				<img alt=\"댕냥일기\"  src=\"/resources/css_image/logo.png\"  class=\"logo-img\">\r\n");
      out.write("				<span class=\"nav-logo-text\">댕냥일기</span>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			  <div class=\"menu-list\">\r\n");
      out.write("				<div class=\"one-menu\">\r\n");
      out.write("					<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
      out.write("					<a href=\"/member/mainFeed.kh\" class=\"menu-link\">홈</a>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"one-menu\">\r\n");
      out.write("					<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
      out.write("					<a href=\"/member/search.kh\" class=\"menu-link\">검색</a>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"one-menu\">\r\n");
      out.write("					<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
      out.write("					 <a class=\"open-notification-btn\" >알림</a>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"one-menu\">\r\n");
      out.write("					<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
      out.write("					<a href=\"/chat/chatRoomList.kh\" class=\"menu-link\">메시지</a>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("			</div>		\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"profile\">\r\n");
      out.write("				<div class=\"profile-frame\">\r\n");
      out.write("					<img class=\"profileImage\"\r\n");
      out.write("                            src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty loginMember.userImage ? loginMember.userImage : '/resources/profile_file/default_profile.png'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("                            alt=\"프로필 이미지\" />\r\n");
      out.write("				</div>\r\n");
      out.write("					<a class=\"myNick\" href=\"/post/myFeedFrm.kh\"> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</a>\r\n");
      out.write("			</div>\r\n");
      out.write("			<hr>\r\n");
      out.write("			<hr>\r\n");
      out.write("			<a href=\"/member/logout.kh\" style=\"color: gray;\">\r\n");
      out.write("			<i class=\"fa-solid fa-right-from-bracket\" style=\"color: gray;\"></i> 로그아웃</a>					\r\n");
      out.write("		</nav>\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	 <div class=\"notification-sidebar\" id=\"notificationSidebar\">\r\n");
      out.write("		    <button class=\"close-sidebar-btn\">&times;</button> <!-- X 버튼 -->\r\n");
      out.write("		    <div class=\"notification-header\">\r\n");
      out.write("		        <span>알림</span>\r\n");
      out.write("		        <button class=\"mark-all-read-btn\">지우기</button>\r\n");
      out.write("		    </div>\r\n");
      out.write("		    <div class=\"notification-content\">\r\n");
      out.write("		        <p>읽지 않은 알림이 없습니다.</p>\r\n");
      out.write("		    </div>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("   <script>\r\n");
      out.write("	    $(document).ready(function () {\r\n");
      out.write("	        // JSP에서 사용자 번호를 전달받음\r\n");
      out.write("	        let userNo = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("; // JSP 변수\r\n");
      out.write("	\r\n");
      out.write("	        // 알림 사이드바 열기\r\n");
      out.write("	        $('.open-notification-btn').click(function () {\r\n");
      out.write("	            $('#notificationSidebar').addClass('open');\r\n");
      out.write("	            fetchNotifications(); // 알림 가져오기\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 알림 사이드바 닫기\r\n");
      out.write("	        $('.close-sidebar-btn').click(function () {\r\n");
      out.write("	            $('#notificationSidebar').removeClass('open');\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 외부 클릭 시 닫기\r\n");
      out.write("	        $(document).click(function (event) {\r\n");
      out.write("	            if (!$(event.target).closest('#notificationSidebar, .open-notification-btn').length) {\r\n");
      out.write("	                $('#notificationSidebar').removeClass('open');\r\n");
      out.write("	            }\r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	        // 알림 가져오기 (문자열 결합 방식)\r\n");
      out.write("	        function fetchNotifications() {\r\n");
      out.write("	            var url = '/notify/poll/' + userNo;\r\n");
      out.write("	\r\n");
      out.write("	            $.ajax({\r\n");
      out.write("	                url: url,\r\n");
      out.write("	                method: 'GET',\r\n");
      out.write("	                success: function (notifications) {\r\n");
      out.write("	                    var contentHtml = '';\r\n");
      out.write("	\r\n");
      out.write("	                    if (notifications.length > 0) {\r\n");
      out.write("	                        notifications.forEach(function (notification) {\r\n");
      out.write("	                            contentHtml +=\r\n");
      out.write("	                                '<div class=\"notification-item\">' +\r\n");
      out.write("	                                '<span>' + notification.notifyContent + '</span>' +\r\n");
      out.write("	                                '</div>';\r\n");
      out.write("	                        });\r\n");
      out.write("	                    } else {\r\n");
      out.write("	                        contentHtml = '<p>읽지 않은 알림이 없습니다.</p>';\r\n");
      out.write("	                    }\r\n");
      out.write("	\r\n");
      out.write("	                    $('.notification-content').html(contentHtml);\r\n");
      out.write("	                },\r\n");
      out.write("	                error: function () {\r\n");
      out.write("	                    console.error('알림을 가져오는 중 오류 발생');\r\n");
      out.write("	                }\r\n");
      out.write("	            });\r\n");
      out.write("	        }\r\n");
      out.write("	\r\n");
      out.write("	     // 모든 알림 읽음 처리\r\n");
      out.write("	        function markAllAsRead() {\r\n");
      out.write("	            $.ajax({\r\n");
      out.write("	                url: '/notify/mark-all-read/' + userNo,\r\n");
      out.write("	                method: 'PUT',\r\n");
      out.write("	                success: function (response) {\r\n");
      out.write("	                    if (response === 'success') {\r\n");
      out.write("	                        console.log('모든 알림 읽음 처리 완료');\r\n");
      out.write("	                        fetchNotifications(); // UI 갱신\r\n");
      out.write("	                    } else {\r\n");
      out.write("	                        console.error('모든 알림 읽음 처리 실패');\r\n");
      out.write("	                    }\r\n");
      out.write("	                },\r\n");
      out.write("	                error: function () {\r\n");
      out.write("	                    console.error('모든 알림 읽음 처리 중 오류 발생');\r\n");
      out.write("	                }\r\n");
      out.write("	            });\r\n");
      out.write("	        }\r\n");
      out.write("\r\n");
      out.write("	        // 버튼 클릭 이벤트에 연결\r\n");
      out.write("	        $('.mark-all-read-btn').click(markAllAsRead);\r\n");
      out.write("\r\n");
      out.write("	       \r\n");
      out.write("	    });\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("			\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<main id=\"main-feed\">\r\n");
      out.write("		<div>\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write(".material-icons {\r\n");
      out.write("	font-size: 28px;\r\n");
      out.write("	vertical-align: middle;\r\n");
      out.write("	pointer-events: none;\r\n");
      out.write("}\r\n");
      out.write(".add-icons {\r\n");
      out.write("	display: none;\r\n");
      out.write("	color: #ad5a01;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	right: 0;\r\n");
      out.write("	bottom: 25px;\r\n");
      out.write("	font-size: 22px;\r\n");
      out.write("}\r\n");
      out.write(".nav-icons {\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-modal-backdrop {\r\n");
      out.write("	position: fixed;\r\n");
      out.write("	top: 0;\r\n");
      out.write("	left: 0;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	height: 100%;\r\n");
      out.write("	background-color: rgba(0, 0, 0, 0.4);\r\n");
      out.write("	z-index: 9990;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-modal-content {\r\n");
      out.write("	position: fixed;\r\n");
      out.write("	top: 50%;\r\n");
      out.write("	left: 50%;\r\n");
      out.write("	transform: translate(-50%, -50%);\r\n");
      out.write("	width: 500px;\r\n");
      out.write("	height: 660px;\r\n");
      out.write("	background: white;\r\n");
      out.write("	padding: 5px 0;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n");
      out.write("	display: flex;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-image-container {\r\n");
      out.write("	flex: 1;\r\n");
      out.write("	background-color: #f3f3f3;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	border-top: 1px solid #ddd;\r\n");
      out.write("	border-bottom: 1px solid #ddd;\r\n");
      out.write("	display: flex\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-image-container img,\r\n");
      out.write(".story-image-container video {\r\n");
      out.write("    max-width: 100%;\r\n");
      out.write("    max-height: 100%;\r\n");
      out.write("    object-fit: contain;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-header,\r\n");
      out.write(".story-footer {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("}\r\n");
      out.write(".story-footer {\r\n");
      out.write("	justify-content: right;\r\n");
      out.write("	height: 40px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-header p{\r\n");
      out.write("	margin: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-nav-btn {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 50%;\r\n");
      out.write("	transform: translateY(-50%);\r\n");
      out.write("	background-color: rgba(0, 0, 0, 0.5);\r\n");
      out.write("	color: white;\r\n");
      out.write("	border: none;\r\n");
      out.write("	padding: 5px;\r\n");
      out.write("	border-radius: 50%;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	z-index: 10;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-nav-btn:hover {\r\n");
      out.write("	background-color: rgba(0, 0, 0, 0.8);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-prev-btn {\r\n");
      out.write("	left: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-next-btn {\r\n");
      out.write("	right: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 닫기 버튼 */\r\n");
      out.write(".story-close-btn {\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 10px;\r\n");
      out.write("	right: 10px;\r\n");
      out.write("	background: none;\r\n");
      out.write("	border: none;\r\n");
      out.write("	font-size: 32px;\r\n");
      out.write("	color: black;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-action-btn {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	width: 40px;\r\n");
      out.write("	height: 40px;\r\n");
      out.write("	background: none;\r\n");
      out.write("	border: none;\r\n");
      out.write("	font-size: 24px;\r\n");
      out.write("	color: black;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* ===== 스토리 섹션 ===== */\r\n");
      out.write(".stories-container {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    overflow-x: auto;\r\n");
      out.write("    background-color: #fff;\r\n");
      out.write("    border-bottom: 1px solid #ddd;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".stories-container::-webkit-scrollbar {\r\n");
      out.write("    display: none; /* 스크롤바 숨기기 */\r\n");
      out.write("}\r\n");
      out.write(".story-item {\r\n");
      out.write("	position: relative;\r\n");
      out.write("    flex: 0 0 auto;\r\n");
      out.write("    width: 70px;\r\n");
      out.write("    margin-left: 5px;\r\n");
      out.write("    margin-right: 5px;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-image {\r\n");
      out.write("    width: 60px;\r\n");
      out.write("    height: 60px;\r\n");
      out.write("    margin: auto;\r\n");
      out.write("    border-radius: 50%;\r\n");
      out.write("    border: 2px solid #ff8501; /* 인스타그램의 스토리 테두리 색상 */\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    background-color: #f5f5f5;\r\n");
      out.write("    position: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".story-image img {\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    height: 100%;\r\n");
      out.write("    object-fit: cover;\r\n");
      out.write("    border-radius: 50%;\r\n");
      out.write("}\r\n");
      out.write(".story-item p {\r\n");
      out.write("	margin-top: 5px;\r\n");
      out.write("    margin-bottom: 5px;\r\n");
      out.write("    font-size: 14px;\r\n");
      out.write("    color: #333;\r\n");
      out.write("    white-space: nowrap;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    text-overflow: ellipsis;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"stories-container\">\r\n");
      out.write("		<div class=\"story-item add-story\" data-user-no=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("		    <div class=\"story-image\">\r\n");
      out.write("			    <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty loginMember.userImage ? \r\n			    	loginMember.userImage : '/resources/profile_file/default_profile.png'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("			    	alt=\"프로필 이미지\" />\r\n");
      out.write("			</div>\r\n");
      out.write("		    <p>내 스토리</p>\r\n");
      out.write("		    <span class=\"material-icons add-icons\">add_circle_outline</span>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	$(document).ready(function () {\r\n");
      out.write("		searchMyStory();\r\n");
      out.write("		searchStoryFollowList();		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	// 스토리를 올린 유저 목록과 각 유저의 스토리를 담을 변수\r\n");
      out.write("	let storyFollowList = [];\r\n");
      out.write("	let myStory = {\r\n");
      out.write("		userNo: \"\",\r\n");
      out.write("		userNickname: \"\",\r\n");
      out.write("		userImage: \"\",\r\n");
      out.write("		userIndex: \"\",\r\n");
      out.write("		storyFileList: []\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	let currentUserIndex = 0; // storyFollowList 내의 인덱스\r\n");
      out.write("	let currentStoryIndex = 0; // 선택된 사용자의 storyFileList 내의 인덱스\r\n");
      out.write("	let currentStoryNo = null; // 현재 보고 있는 스토리의 storyNo\r\n");
      out.write("	\r\n");
      out.write("	function escapeHtml(text) {\r\n");
      out.write("	    const map = {\r\n");
      out.write("	        '&': '&amp;',\r\n");
      out.write("	        '<': '&lt;',\r\n");
      out.write("	        '>': '&gt;',\r\n");
      out.write("	        '\"': '&quot;',\r\n");
      out.write("	        \"'\": '&#039;'\r\n");
      out.write("	    };\r\n");
      out.write("	    return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 스토리 목록 HTML 생성\r\n");
      out.write("	function createStoryItem(item) {\r\n");
      out.write("	    const imageSrc = item.userImage\r\n");
      out.write("	        ? escapeHtml(item.userImage)\r\n");
      out.write("	        : '/resources/profile_file/default_profile.png';\r\n");
      out.write("\r\n");
      out.write("	    const safeNickname = escapeHtml(item.userNickname);\r\n");
      out.write("\r\n");
      out.write("	    let html = '';\r\n");
      out.write("	    html += '<div class=\"story-item\" data-user-no=\"' + item.userNo + '\">';\r\n");
      out.write("	    html +=     '<div class=\"story-image\">';\r\n");
      out.write("	    html +=         '<img src=\"' + imageSrc + '\" alt=\"프로필 이미지\" />';\r\n");
      out.write("	    html +=     '</div>';\r\n");
      out.write("	    html +=     '<p>' + safeNickname + '</p>';\r\n");
      out.write("	    html += '</div>';\r\n");
      out.write("	    \r\n");
      out.write("	    return html;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 내 스토리 가져오기\r\n");
      out.write("	function searchMyStory(){\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: '/story/myStory.kh',\r\n");
      out.write("			type: 'POST',\r\n");
      out.write("			data: {userNo: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"},\r\n");
      out.write("		 	success: function(res){	\r\n");
      out.write("		 		myStory = res;\r\n");
      out.write("		 		\r\n");
      out.write("		 		// myStory.fileList가 없거나 빈 배열일 경우 add 아이콘 표시\r\n");
      out.write("	            if (myStory.storyFileList.length === 0) {\r\n");
      out.write("	                $('.add-story .add-icons').show();\r\n");
      out.write("	            } else {\r\n");
      out.write("	                $('.add-story .add-icons').hide();\r\n");
      out.write("	            }\r\n");
      out.write("		 	},\r\n");
      out.write("			error: function(xhr, status, error) {\r\n");
      out.write("		        console.log(\"내 스토리 정보를 가져오지 못했습니다.\");\r\n");
      out.write("		    }\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 팔로우 목록 중 스토리 올린사람\r\n");
      out.write("	function searchStoryFollowList(){\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: '/story/storyFollowList.kh',\r\n");
      out.write("			type: 'POST',\r\n");
      out.write("			data: {userNo: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"},\r\n");
      out.write("		 	success: function(res){\r\n");
      out.write("				const $storiesContainer = $('.stories-container');\r\n");
      out.write("		        // \"내 스토리 추가\" 버튼을 제외한 모든 기존 스토리 아이템을 제거\r\n");
      out.write("		        $storiesContainer.find('.story-item').not('.add-story').remove();\r\n");
      out.write("		        \r\n");
      out.write("		        // res 데이터를 storyFollowList에 재할당\r\n");
      out.write("		        storyFollowList = res;\r\n");
      out.write("		        \r\n");
      out.write("		        if (Array.isArray(storyFollowList)) {\r\n");
      out.write("		        	storyFollowList.forEach(function(item) {\r\n");
      out.write("	                    const storyHtml = createStoryItem(item);\r\n");
      out.write("	                    $storiesContainer.append(storyHtml);\r\n");
      out.write("	                });\r\n");
      out.write("		        } else {\r\n");
      out.write("		            console.error('응답 데이터가 배열이 아닙니다.');\r\n");
      out.write("		            $storiesContainer.html('<p>Invalid data format.</p>');\r\n");
      out.write("		        }\r\n");
      out.write("			},\r\n");
      out.write("			error: function(xhr, status, error) {\r\n");
      out.write("		        console.error(\"AJAX 요청 실패:\", status, error);\r\n");
      out.write("		        const $storiesContainer = $('.stories-container');\r\n");
      out.write("		        // \"내 스토리 추가\" 버튼을 제외한 모든 스토리 아이템을 제거하고 에러 메시지 추가\r\n");
      out.write("		        $storiesContainer.find('.story-item').not('.add-story').remove();\r\n");
      out.write("		        $storiesContainer.append('<p>Error loading stories.</p>');\r\n");
      out.write("		    }\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function createStoryModal(){\r\n");
      out.write("		let selectUser = currentUserIndex === -1 ? myStory : storyFollowList[currentUserIndex];\r\n");
      out.write("		\r\n");
      out.write("		const imageSrc = selectUser.userImage\r\n");
      out.write("	        ? escapeHtml(selectUser.userImage)\r\n");
      out.write("	        : '/resources/profile_file/default_profile.png';\r\n");
      out.write("\r\n");
      out.write("    	const safeNickname = escapeHtml(selectUser.userNickname);\r\n");
      out.write("    	\r\n");
      out.write("    	const uploadTime = selectUser.storyFileList.length > 0\r\n");
      out.write("	        ? calculateRelativeTime(selectUser.storyFileList[currentStoryIndex].storyCreateDate)\r\n");
      out.write("	        : \"\";\r\n");
      out.write("    	\r\n");
      out.write("		let html = '';\r\n");
      out.write("		html += '<div id=\"storyModalBackdrop\" class=\"story-modal-backdrop\">';\r\n");
      out.write("		html += '<div class=\"story-modal-content\">';\r\n");
      out.write("		html += '<div class=\"story-header\">';\r\n");
      out.write("		html += '<div class=\"story-item\" data-user-no=\"' + selectUser.userNo + '\">';\r\n");
      out.write("		html += '<div class=\"story-image\">';\r\n");
      out.write("		html += '<img src=\"' + imageSrc + '\" alt=\"프로필 이미지\" />';\r\n");
      out.write("		html += '</div>';\r\n");
      out.write("		html += '<p>' + safeNickname + '</p>';\r\n");
      out.write("		html += '</div>';\r\n");
      out.write("		html += '<p id=\"storyDate\">' + uploadTime + '</p>';\r\n");
      out.write("		html += '<button id=\"stCloseBtn\" class=\"story-close-btn\">';\r\n");
      out.write("		html += '<span class=\"material-icons\">close</span>';\r\n");
      out.write("		html += '</button>';\r\n");
      out.write("		html += '</div>';\r\n");
      out.write("		\r\n");
      out.write("		html += '<div class=\"story-image-container\"></div>';\r\n");
      out.write("	    \r\n");
      out.write("	    html += '<div class=\"story-footer\">';\r\n");
      out.write("	    \r\n");
      out.write("	    if (String(selectUser.userNo) === \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\") {\r\n");
      out.write("	        html += '<input type=\"file\" id=\"fileInput\" name=\"files\" accept=\"video/*, image/*\"'\r\n");
      out.write("	             +   'style=\"display: none;\" multiple>';\r\n");
      out.write("	        html +=  '<button id=\"stAddBtn\" class=\"story-action-btn\">';\r\n");
      out.write("	        html +=  '<span class=\"material-icons\">post_add</span>';\r\n");
      out.write("	        html += '</button>';\r\n");
      out.write("	        html += '<button id=\"stDeleteBtn\" class=\"story-action-btn\">';\r\n");
      out.write("	        html +=  '<span class=\"material-icons\">delete_outline</span>';\r\n");
      out.write("	        html += '</button>';\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("		html += '</div>' +\r\n");
      out.write("		'</div>' +\r\n");
      out.write("		'</div>';\r\n");
      out.write("		\r\n");
      out.write("		return html;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 시간 단위로 상대 시간 계산 함수\r\n");
      out.write("	function calculateRelativeTime(storyCreateDate) {\r\n");
      out.write("	    const storyDate = new Date(storyCreateDate);\r\n");
      out.write("	    const now = new Date();\r\n");
      out.write("	    const diffTime = Math.abs(now - storyDate); // 밀리초 차이\r\n");
      out.write("	    const diffHours = Math.floor(diffTime / (1000 * 60 * 60)); // 시간 단위로 변환\r\n");
      out.write("\r\n");
      out.write("	    return \"• \" + diffHours + \"시간 전\";\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function showCurrentStory() {\r\n");
      out.write("	    const selectUser = currentUserIndex === -1 ? myStory : storyFollowList[currentUserIndex];\r\n");
      out.write("\r\n");
      out.write("	    // 모달 헤더 업데이트\r\n");
      out.write("	    const imageSrc = selectUser.userImage ? escapeHtml(selectUser.userImage) : '/resources/profile_file/default_profile.png';\r\n");
      out.write("	    const safeNickname = escapeHtml(selectUser.userNickname);\r\n");
      out.write("	    const uploadTime = selectUser.storyFileList.length > 0\r\n");
      out.write("	        ? calculateRelativeTime(selectUser.storyFileList[currentStoryIndex].storyCreateDate)\r\n");
      out.write("	        : \"\";\r\n");
      out.write("\r\n");
      out.write("        $('#storyModalBackdrop .story-header .story-image img').attr('src', imageSrc);\r\n");
      out.write("	    $('#storyModalBackdrop .story-header p').text(safeNickname);\r\n");
      out.write("	    $('#storyModalBackdrop #storyDate').text(uploadTime);\r\n");
      out.write("\r\n");
      out.write("	    // 스토리 내용 업데이트\r\n");
      out.write("	    const $storyImageContainer = $('#storyModalBackdrop .story-image-container');\r\n");
      out.write("	    $storyImageContainer.empty();\r\n");
      out.write("\r\n");
      out.write("	    if (selectUser.storyFileList.length > 0) {\r\n");
      out.write("	        const file = selectUser.storyFileList[currentStoryIndex];\r\n");
      out.write("	        const mimeType = file.mimeType;\r\n");
      out.write("\r\n");
      out.write("	     	// 현재 스토리의 storyNo 저장\r\n");
      out.write("            currentStoryNo = file.storyNo\r\n");
      out.write("	     	\r\n");
      out.write("	        // 이전 버튼 추가\r\n");
      out.write("	        if (currentStoryIndex > 0 || currentUserIndex > -1) {\r\n");
      out.write("	            $storyImageContainer.append(\r\n");
      out.write("	                '<button class=\"story-nav-btn story-prev-btn\">' +\r\n");
      out.write("	                    '<span class=\"material-icons nav-icons\">navigate_before</span>' +\r\n");
      out.write("	                '</button>'\r\n");
      out.write("	            );\r\n");
      out.write("	        }\r\n");
      out.write("\r\n");
      out.write("	        // 이미지/비디오 콘텐츠 추가\r\n");
      out.write("	        if (mimeType.startsWith('image/')) {\r\n");
      out.write("	            $storyImageContainer.append('<img id=\"storyImage\" src=\"' + file.storyFileName + '\" alt=\"스토리를 추가해주세요.\" />');\r\n");
      out.write("	        } else if (mimeType.startsWith('video/')) {\r\n");
      out.write("	            $storyImageContainer.append(\r\n");
      out.write("	                '<video id=\"storyVideo\" autoplay loop muted>' +\r\n");
      out.write("	                    '<source src=\"' + file.storyFileName + '\" type=\"' + mimeType + '\">' +\r\n");
      out.write("	                '</video>'\r\n");
      out.write("	            );\r\n");
      out.write("	        }\r\n");
      out.write("	        \r\n");
      out.write("	        // 다음 버튼 추가\r\n");
      out.write("	        if (currentStoryIndex < (selectUser.storyFileList.length - 1) || currentUserIndex < (storyFollowList.length - 1)) {\r\n");
      out.write("	            $storyImageContainer.append(\r\n");
      out.write("	                '<button class=\"story-nav-btn story-next-btn\">' +\r\n");
      out.write("	                    '<span class=\"material-icons nav-icons\">navigate_next</span>' +\r\n");
      out.write("	                '</button>'\r\n");
      out.write("	            );\r\n");
      out.write("	        }\r\n");
      out.write("	    } else {\r\n");
      out.write("	        $storyImageContainer.append('<p>스토리가 없습니다. 스토리를 추가해보세요!</p>');\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("	    bindNavigationButtons();\r\n");
      out.write("	    \r\n");
      out.write("	    // 다른 사람 스토리를 볼 시 input 및 delete 숨김\r\n");
      out.write("	    if (currentUserIndex !== -1) {\r\n");
      out.write("            $('#storyModalBackdrop .story-action-btn').hide();\r\n");
      out.write("        } else {\r\n");
      out.write("            $('#storyModalBackdrop .story-action-btn').show();\r\n");
      out.write("        }\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 이전 스토리로 이동하는 함수\r\n");
      out.write("    function navigatePrevious() {\r\n");
      out.write("        if (currentStoryIndex > 0) {\r\n");
      out.write("            currentStoryIndex--;\r\n");
      out.write("        } else if (currentUserIndex > -1) {\r\n");
      out.write("            // 이전 유저로 이동\r\n");
      out.write("            currentUserIndex--;\r\n");
      out.write("            if (currentUserIndex === -1) {\r\n");
      out.write("                // 이제 내 스토리 보기\r\n");
      out.write("                currentStoryIndex = myStory.storyFileList.length - 1; // 수정된 부분\r\n");
      out.write("            } else {\r\n");
      out.write("                // 이전 유저의 마지막 스토리로 설정\r\n");
      out.write("                const previousUser = storyFollowList[currentUserIndex];\r\n");
      out.write("                currentStoryIndex = previousUser.storyFileList.length - 1;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        showCurrentStory();\r\n");
      out.write("    }\r\n");
      out.write("	\r\n");
      out.write(" 	// 다음 스토리로 이동하는 함수\r\n");
      out.write("    function navigateNext() {\r\n");
      out.write("        const selectUser = currentUserIndex === -1 ? myStory : storyFollowList[currentUserIndex];\r\n");
      out.write("        \r\n");
      out.write("        if (currentStoryIndex < (selectUser.storyFileList.length - 1)) {\r\n");
      out.write("            currentStoryIndex++;\r\n");
      out.write("        } else if (currentUserIndex < (storyFollowList.length - 1)) {\r\n");
      out.write("            // 다음 유저로 이동\r\n");
      out.write("            currentUserIndex++;\r\n");
      out.write("            currentStoryIndex = 0;\r\n");
      out.write("        }\r\n");
      out.write("        showCurrentStory();\r\n");
      out.write("    }\r\n");
      out.write("	\r\n");
      out.write("	function bindNavigationButtons() {\r\n");
      out.write("	    // 이전 버튼 클릭 이벤트\r\n");
      out.write("	    $('#storyModalBackdrop').off('click', '.story-prev-btn').on('click', '.story-prev-btn', function(e) {\r\n");
      out.write("	        e.stopPropagation();\r\n");
      out.write("	        navigatePrevious();\r\n");
      out.write("	    });\r\n");
      out.write("\r\n");
      out.write("	    // 다음 버튼 클릭 이벤트\r\n");
      out.write("	    $('#storyModalBackdrop').off('click', '.story-next-btn').on('click', '.story-next-btn', function(e) {\r\n");
      out.write("	        e.stopPropagation();\r\n");
      out.write("	        navigateNext();\r\n");
      out.write("	    });\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 스토리 프로필 클릭시 불러올 modal\r\n");
      out.write("	$('.stories-container').on('click', '.story-item', function() {\r\n");
      out.write("        const loginUserNo = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("		\r\n");
      out.write("		// 프로필 누른 userNo\r\n");
      out.write("	    const userNo = $(this).data('user-no');\r\n");
      out.write("		\r\n");
      out.write("	 	// 스토리 올린 유저 중, 내가 누른 유저 스토리 정보\r\n");
      out.write("        let selectUser;\r\n");
      out.write("        let userIndex = -1; // -1은 '내 스토리'를 나타냄\r\n");
      out.write("\r\n");
      out.write("		// 내 스토리와 다른유저 스토리 구분\r\n");
      out.write("        if(loginUserNo === String(userNo)){\r\n");
      out.write("            selectUser = myStory;\r\n");
      out.write("        } else {\r\n");
      out.write("            userIndex = storyFollowList.findIndex(function(item) {\r\n");
      out.write("                return item.userNo === userNo;\r\n");
      out.write("            });\r\n");
      out.write("            if (userIndex === -1) {\r\n");
      out.write("                console.error('storyFollowList에서 사용자를 찾을 수 없습니다.');\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            selectUser = storyFollowList[userIndex];\r\n");
      out.write("        }\r\n");
      out.write("		\r\n");
      out.write("		// 스토리 인덱스를 0으로 초기화 (첫 번째 스토리)\r\n");
      out.write("	    currentUserIndex = userIndex;\r\n");
      out.write("        currentStoryIndex = 0;\r\n");
      out.write("	 		\r\n");
      out.write("		// 동적 storyModal\r\n");
      out.write("		const storyModalHtml = createStoryModal(userIndex, currentStoryIndex);\r\n");
      out.write("        $('body').prepend(storyModalHtml);\r\n");
      out.write("        $(\"#storyModalBackdrop\").fadeIn(200);\r\n");
      out.write("		\r\n");
      out.write("		// 첫 번째 스토리 표시\r\n");
      out.write("	    showCurrentStory();\r\n");
      out.write("		\r\n");
      out.write("		// 추가 버튼 클릭시 input 호출\r\n");
      out.write("		$('#storyModalBackdrop #stAddBtn').on('click', function () {\r\n");
      out.write("            $('#storyModalBackdrop #fileInput').click();\r\n");
      out.write("        }); \r\n");
      out.write("		\r\n");
      out.write("		// 파일 입력 받을 시 호출\r\n");
      out.write("		$('#storyModalBackdrop #fileInput').on('change', function (event){\r\n");
      out.write("            const files = event.target.files;\r\n");
      out.write("			\r\n");
      out.write("	           if (!files.length) return;\r\n");
      out.write("	           \r\n");
      out.write("	           // 전체 파일 크기 계산\r\n");
      out.write("	           let totalSize = 0;\r\n");
      out.write("	           Array.from(files).forEach(file => {\r\n");
      out.write("	               totalSize += file.size;\r\n");
      out.write("	           });\r\n");
      out.write("	           \r\n");
      out.write("	           if (totalSize > 10 * 1024 * 1024) {\r\n");
      out.write("	               alert('선택한 파일들의 총 크기가 10MB를 초과합니다. 다른 파일을 선택해주세요.');\r\n");
      out.write("	               $(this).val(''); // 파일 입력 초기화\r\n");
      out.write("	               return;\r\n");
      out.write("	           }\r\n");
      out.write("	        \r\n");
      out.write("	           // FormData 생성\r\n");
      out.write("	           const formData = new FormData();\r\n");
      out.write("	           formData.append(\"userNo\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\");\r\n");
      out.write("	           Array.from(files).forEach(file => {\r\n");
      out.write("	               formData.append('files', file);\r\n");
      out.write("	           });\r\n");
      out.write("	           \r\n");
      out.write("	           $.ajax({\r\n");
      out.write("	               url: '/story/storyWrite.kh',\r\n");
      out.write("	               type: 'POST',\r\n");
      out.write("	               data: formData,\r\n");
      out.write("	               processData: false,\r\n");
      out.write("	               contentType: false,\r\n");
      out.write("	               success: function (response) {\r\n");
      out.write("	            	   if (response === 'success') {\r\n");
      out.write("	            		   alert('스토리가 정상적으로 업로드 되었습니다.');\r\n");
      out.write("		 	               stClose();\r\n");
      out.write("		 	            } else if (response === 'storyFileFail') {\r\n");
      out.write("		 	                alert('파일 업로드 중 에러가 발생했습니다.');\r\n");
      out.write("		 	            } else if (response === 'storyFail'){\r\n");
      out.write("		 	            	alert('스토리 업로드 중 에러가 발생했습니다..');\r\n");
      out.write("		 	            } else {\r\n");
      out.write("		 	                alert('파일이 없습니다. 다시 시도해주세요.');\r\n");
      out.write("		 	            }\r\n");
      out.write("	               },\r\n");
      out.write("	               error: function (response) {\r\n");
      out.write("	                   alert('파일 업로드 실패!');\r\n");
      out.write("	                   console.log(response);\r\n");
      out.write("	               }\r\n");
      out.write("	           });\r\n");
      out.write("	\r\n");
      out.write("	           // 파일 입력 초기화\r\n");
      out.write("	           $(this).val('');\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// (이벤트) 닫기 버튼\r\n");
      out.write("		$('#storyModalBackdrop').on('click', '#stCloseBtn', stClose);\r\n");
      out.write("		\r\n");
      out.write("		// (이벤트) 삭제 버튼\r\n");
      out.write("		$('#storyModalBackdrop').on('click', '#stDeleteBtn', stDelete);\r\n");
      out.write("		\r\n");
      out.write("		// 스토리 닫기\r\n");
      out.write("		function stClose(){\r\n");
      out.write("			$(\"#storyModalBackdrop\").remove();\r\n");
      out.write("			// 스토리를 닫을 때 마다 최신 스토리 불러오기\r\n");
      out.write("			searchMyStory();\r\n");
      out.write("			searchStoryFollowList();\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 스토리 삭제 함수\r\n");
      out.write("        function stDelete(){\r\n");
      out.write("            // 삭제 확인 창 표시\r\n");
      out.write("            const confirmDelete = confirm(\"정말로 이 스토리를 삭제하시겠습니까?\");\r\n");
      out.write("            if (!confirmDelete) {\r\n");
      out.write("                return; // 사용자가 취소를 누르면 함수 종료\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // 삭제 권한 검사: 현재 스토리의 userNo와 세션의 userNo 비교\r\n");
      out.write("            // 현재 스토리의 userNo는 'myStory'일 때는 loginUserNo와 동일, 아니면 다른 사용자\r\n");
      out.write("            if (currentUserIndex !== -1) {\r\n");
      out.write("                // 'myStory'가 아니면 삭제 권한이 없음\r\n");
      out.write("                alert(\"이 스토리를 삭제할 권한이 없습니다.\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            if (!currentStoryNo) {\r\n");
      out.write("                alert(\"삭제할 스토리를 찾을 수 없습니다.\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // 삭제 요청을 서버로 전송\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: '/story/deleteStory.kh',\r\n");
      out.write("                type: 'POST',\r\n");
      out.write("                data: { storyNo: currentStoryNo },\r\n");
      out.write("                success: function(response) {\r\n");
      out.write("                    if (response === 'success') {\r\n");
      out.write("                        alert('스토리가 정상적으로 삭제되었습니다.');\r\n");
      out.write("                        stClose();\r\n");
      out.write("                    } else if (response === 'error') {\r\n");
      out.write("                        alert('스토리 삭제 중 오류가 발생했습니다.');\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert('알 수 없는 오류가 발생했습니다.');\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(xhr, status, error) {\r\n");
      out.write("                    alert('스토리 삭제 요청에 실패했습니다.');\r\n");
      out.write("                    console.log(error);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("	 	<div>\r\n");
      out.write("	 		 <div id=\"feed-container\" class=\"main-feed-container\"></div>\r\n");
      out.write("	 		 <div id=\"loading\">\r\n");
      out.write("	 		  	<i class=\"fa fa-spinner fa-spin\"></i> 로딩중...\r\n");
      out.write("	 		</div>\r\n");
      out.write("	 	</div>\r\n");
      out.write("	</main>\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("/* 오른쪽 사이드 메뉴 스타일 */\r\n");
      out.write(".right-menu {\r\n");
      out.write("    position: fixed;\r\n");
      out.write("    top: 0;\r\n");
      out.write("    right: 0;\r\n");
      out.write("    width: 300px; /* 원하는 너비로 조정 */\r\n");
      out.write("    height: 100%;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border-left: 1px solid #ddd; /* 메인 콘텐츠와 구분을 위해 왼쪽에 경계선 추가 */\r\n");
      out.write("    background-color: #fff; /* 배경색 설정 */\r\n");
      out.write("    overflow-y: auto; /* 내용이 넘칠 경우 스크롤 */\r\n");
      out.write("    z-index: 100; /* 다른 요소보다 위에 표시 */\r\n");
      out.write("}\r\n");
      out.write("/* 간단한 스타일 추가 */\r\n");
      out.write(".right-menu {\r\n");
      out.write("    width: 300px;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border: 1px solid #ddd;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".re-friend-container, .family-container {\r\n");
      out.write("    margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-container-title, .family-container-title {\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    margin-bottom: 10px;\r\n");
      out.write("    text-align: center; /* 가운데 정렬 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-list, .family-list {\r\n");
      out.write("    list-style: none;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-item, .family-item {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    padding: 5px 0;\r\n");
      out.write("    border-bottom: 1px solid #eee;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-item:last-child, .family-item:last-child {\r\n");
      out.write("    border-bottom: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".profile-img {\r\n");
      out.write("    width: 50px;\r\n");
      out.write("    height: 50px;\r\n");
      out.write("    border-radius: 50%;\r\n");
      out.write("    object-fit: cover;\r\n");
      out.write("    margin-right: 10px;\r\n");
      out.write("    border: 1px solid gray;\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".recommendation-info, .family-info {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".username {\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".pet-info {\r\n");
      out.write("    font-size: 0.9em;\r\n");
      out.write("    color: #666;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".follow-btn, .unfollow-btn {\r\n");
      out.write("    display: inline-block; /* 버튼 크기 강제 적용 */\r\n");
      out.write("    padding: 5px 10px; /* 내부 여백 */\r\n");
      out.write("    width: 80px; /* 버튼 너비 고정 */\r\n");
      out.write("    height: 32px; /* 버튼 높이 고정 */\r\n");
      out.write("    line-height: 25px; /* 텍스트 수직 정렬 */\r\n");
      out.write("    text-align: center; /* 텍스트 수평 정렬 */\r\n");
      out.write("    color: white;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 3px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    box-sizing: border-box; /* 패딩과 높이 계산 포함 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".follow-btn {\r\n");
      out.write("    background-color: #FF8383;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".unfollow-btn {\r\n");
      out.write("    background-color: gray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#loadingSpinner {\r\n");
      out.write("    display: none;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".friend-item-content, .family-item-content {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<link rel =\"stylesheet\"  href=\"/resources/default.css\">\r\n");
      out.write("<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <aside class=\"right-menu\">\r\n");
      out.write("    	");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    </aside>\r\n");
      out.write("    <script>\r\n");
      out.write("    $(document).ready(function(){\r\n");
      out.write("        // 이벤트 위임\r\n");
      out.write("        $(document).on(\"click\", \".follow-toggle\", function(){\r\n");
      out.write("            var $btn = $(this);\r\n");
      out.write("            var userId = $btn.data(\"userid\");       // 상대방 아이디\r\n");
      out.write("            var isFollowing = $btn.data(\"following\"); // true/false\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: '/follow/follow.kh',        // 실제 컨트롤러 매핑 URL\r\n");
      out.write("                type: 'POST',\r\n");
      out.write("                dataType: 'json',\r\n");
      out.write("                data: {\r\n");
      out.write("                    userId: userId,\r\n");
      out.write("                    action: isFollowing ? 'unfollow' : 'follow'\r\n");
      out.write("                },\r\n");
      out.write("                success: function(response){\r\n");
      out.write("                    // 예: response = { success: true/false, isFollowing: true/false, isMutualFollow: true/false, ... }\r\n");
      out.write("                    if(response.success){\r\n");
      out.write("                        // 이미 팔로우중 -> 언팔 성공\r\n");
      out.write("                        if(response.isFollowing){\r\n");
      out.write("                            // 맞팔 여부에 따라 텍스트가 다를 수 있음\r\n");
      out.write("                            // 예: response.isMutualFollow ? '언팔로우' : '언팔로우'\r\n");
      out.write("                            $btn.text('언팔로우').data('following', true).removeClass('follow-btn').addClass('unfollow-btn');\r\n");
      out.write("                        } else {\r\n");
      out.write("                            // 팔로우 상태 아님 -> 팔로우 버튼으로\r\n");
      out.write("                            $btn.text('팔로우').data('following', false).removeClass('unfollow-btn').addClass('follow-btn');\r\n");
      out.write("                        }\r\n");
      out.write("                        // 1) 만약 Controller 응답에 followerCount / followingCount가 있으면\r\n");
      out.write("                        //    아래처럼 DOM을 업데이트\r\n");
      out.write("                        if(response.followerCount !== undefined){\r\n");
      out.write("                            $(\".followerCountSpan\").text(response.followerCount);\r\n");
      out.write("                        }\r\n");
      out.write("                        if(response.followingCount !== undefined){\r\n");
      out.write("                            $(\".followingCountSpan\").text(response.followingCount);\r\n");
      out.write("                        }\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(\"팔로우/언팔로우 처리 실패: \" + (response.message || ''));\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(){\r\n");
      out.write("                    console.log(\"AJAX error!\");\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	let offset = 0;       // 현재까지 로드된 게시물 수\r\n");
      out.write("    let isLoading = false; // 중복 로딩 방지\r\n");
      out.write("    let noMorePosts = false; // 새 게시물이 더이상 없는 상태인지 여부\r\n");
      out.write("    const limit = 10;  \r\n");
      out.write("    const loadedPostIds = new Set();\r\n");
      out.write("\r\n");
      out.write("    $(document).ready(function() {\r\n");
      out.write("    	 \r\n");
      out.write("    	//좋아요 상태 초기화 선언\r\n");
      out.write("    	window.initializeLikeButtons = function () {\r\n");
      out.write("    	      \r\n");
      out.write("    	        $(\".post-like\").each(function () {\r\n");
      out.write("    	            const $btn = $(this);\r\n");
      out.write("    	            const postNo = $btn.data(\"target-no\");\r\n");
      out.write("    	            const userNo = $btn.data(\"user-no\");\r\n");
      out.write("\r\n");
      out.write("    	            if (!postNo || !userNo) {\r\n");
      out.write("    	                console.warn(`[WARN] postNo 또는 userNo가 없음.`);\r\n");
      out.write("    	                return;\r\n");
      out.write("    	            }\r\n");
      out.write("\r\n");
      out.write("    	            // 좋아요 상태 확인\r\n");
      out.write("    	            $.ajax({\r\n");
      out.write("    	                url: \"/post/isLiked.kh\",\r\n");
      out.write("    	                type: \"GET\",\r\n");
      out.write("    	                data: { targetNo: postNo, userNo: userNo, targetType: \"P\" },\r\n");
      out.write("    	                success: function (response) {\r\n");
      out.write("    	                    const isLiked = response === \"true\";\r\n");
      out.write("    	                    $btn.data(\"liked\", isLiked);\r\n");
      out.write("    	                    $btn.attr(\"data-liked\", isLiked.toString());\r\n");
      out.write("    	                    $btn.find(\"svg\")\r\n");
      out.write("    	                        .removeClass(\"bi-heart bi-heart-fill\")\r\n");
      out.write("    	                        .addClass(isLiked ? \"bi-heart-fill\" : \"bi-heart\");\r\n");
      out.write("    	                },\r\n");
      out.write("    	                error: function (xhr, status, error) {\r\n");
      out.write("    	                    console.error(`[ERROR] 좋아요 상태 확인 실패 - postNo: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${postNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`, error);\r\n");
      out.write("    	                },\r\n");
      out.write("    	            });\r\n");
      out.write("    	        });\r\n");
      out.write("    	    };\r\n");
      out.write("    	\r\n");
      out.write("    	// 페이지 로드 시 초기 게시물 로딩\r\n");
      out.write("        loadInitialPosts();\r\n");
      out.write("        \r\n");
      out.write("        // 스크롤 이벤트 감지: 끝부분 근접 시 추가 로딩\r\n");
      out.write("        $(window).scroll(function() {\r\n");
      out.write("        	\r\n");
      out.write("        	if (noMorePosts) {\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("        	\r\n");
      out.write("            if ($(window).scrollTop() + $(window).height() >= $(document).height() - 100) {\r\n");
      out.write("                if (!isLoading) {\r\n");
      out.write("                    loadMorePosts();\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 초기 게시물 불러오기\r\n");
      out.write("    function loadInitialPosts() {\r\n");
      out.write("        isLoading = true;\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: '/post/initialPosts.kh',  // 컨트롤러에서 JSON 리스트 반환\r\n");
      out.write("            type: 'GET',\r\n");
      out.write("            dataType: 'json',\r\n");
      out.write("            success: function(data) {\r\n");
      out.write("            	// 새로운 게시물만 필터링\r\n");
      out.write("                let newPosts = data.filter(post => !loadedPostIds.has(post.postNo));\r\n");
      out.write("                //console.log(\"[loadInitialPosts] data:\", data);\r\n");
      out.write("                if (newPosts.length > 0) {\r\n");
      out.write("                offset += newPosts.length;\r\n");
      out.write("                renderPosts(newPosts);\r\n");
      out.write("                // 새로운 게시물의 postNo를 loadedPostIds에 추가\r\n");
      out.write("                newPosts.forEach(post => {\r\n");
      out.write("                    loadedPostIds.add(post.postNo);\r\n");
      out.write("                });\r\n");
      out.write("            } else {\r\n");
      out.write("                // 새로운 게시물이 없으면 무한 스크롤 중지\r\n");
      out.write("                noMorePosts = true;\r\n");
      out.write("                $('#feed-container').append('<p style=\"text-align:center;\">더 이상 게시물이 없습니다.</p>');\r\n");
      out.write("            }\r\n");
      out.write("                \r\n");
      out.write("                isLoading = false;\r\n");
      out.write("            },\r\n");
      out.write("            error: function() {\r\n");
      out.write("                alert('게시물을 불러오는 도중 오류가 발생했습니다.');\r\n");
      out.write("                isLoading = false;\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 추가 게시물 불러오기 (무한 스크롤)\r\n");
      out.write("    function loadMorePosts() {\r\n");
      out.write("        isLoading = true;\r\n");
      out.write("        $('#loading').show();\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: '/post/loadMorePosts.kh',\r\n");
      out.write("            type: 'GET',\r\n");
      out.write("            data: { \r\n");
      out.write("            	offset: offset,\r\n");
      out.write("                limit: limit,\r\n");
      out.write("                excludeList: Array.from(loadedPostIds)   // Set을 배열로 변환하여 전송\r\n");
      out.write("            	},\r\n");
      out.write("            traditional: true, // 배열 직렬화 옵션 추가\r\n");
      out.write("            dataType: 'json',\r\n");
      out.write("            success: function(data) {\r\n");
      out.write("            	if (data.length > 0) {\r\n");
      out.write("            		renderPosts(data);\r\n");
      out.write("                    // 새로운 게시물의 postNo를 loadedPostIds에 추가 (Set을 사용하여 중복 없이 추가)\r\n");
      out.write("                    data.forEach(post => {\r\n");
      out.write("                        loadedPostIds.add(post.postNo);\r\n");
      out.write("                    });\r\n");
      out.write("                    offset += data.length;\r\n");
      out.write("                } else {\r\n");
      out.write("                    // 새로운 게시물이 없으면 무한 스크롤 중지\r\n");
      out.write("                    noMorePosts = true;\r\n");
      out.write("                    $('#feed-container').append('<p style=\"text-align:center;\">더 이상 게시물이 없습니다.</p>');\r\n");
      out.write("                }\r\n");
      out.write("                $('#loading').hide();\r\n");
      out.write("                isLoading = false;\r\n");
      out.write("            },\r\n");
      out.write("            error: function() {\r\n");
      out.write("                alert('게시물을 불러오는 도중 오류가 발생했습니다.');\r\n");
      out.write("                $('#loading').hide();\r\n");
      out.write("                isLoading = false;\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 받아온 posts 배열을 HTML로 변환 후 화면에 추가\r\n");
      out.write("    function renderPosts(posts) {\r\n");
      out.write("        let container = $('#feed-container');\r\n");
      out.write("        //console.log(\"renderPosts() 호출, posts:\", posts);\r\n");
      out.write("\r\n");
      out.write("        posts.forEach(function(post, index) {\r\n");
      out.write("            let mediaHtml = '';\r\n");
      out.write("            if(post.postFileNames && post.postFileNames.length > 0) {\r\n");
      out.write("                // 이미지 여러 장이라면, 슬라이더나 캐러셀로 보여주는 방식도 가능\r\n");
      out.write("                post.postFileNames.forEach(function(fileUrl) {\r\n");
      out.write("                    // 파일 확장자 체크\r\n");
      out.write("                    let lowerUrl = fileUrl.toLowerCase();\r\n");
      out.write("                    let ext = lowerUrl.substring(lowerUrl.lastIndexOf('.')+1);\r\n");
      out.write("                    if(ext === 'mp4' || ext === 'wmv' || ext === 'mov') {\r\n");
      out.write("                        mediaHtml += \r\n");
      out.write("                          '<video controls width=\"500\" style=\"max-height:500px;\">'\r\n");
      out.write("                         + '  <source src=\"' + fileUrl + '\" type=\"video/' + ext + '\" />'\r\n");
      out.write("                         + '동영상을 재생할 수 없습니다.'\r\n");
      out.write("                         + '</video>';\r\n");
      out.write("                    } else {\r\n");
      out.write("                        mediaHtml += \r\n");
      out.write("                          '<img src=\"' + fileUrl + '\" '\r\n");
      out.write("                         + '     alt=\"Post Image\" style=\"max-width:500px; max-height:500px;\">';\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            } else {\r\n");
      out.write("                // 이미지가 없는 경우(텍스트만 있는 경우)\r\n");
      out.write("                // 혹은 기본 이미지를 보여줄 수도 있음\r\n");
      out.write("                mediaHtml = '<p>이미지 없음</p>';\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // 혹시 댓글 n개 모두 보기가 필요한 경우\r\n");
      out.write("            let commentLink = '';\r\n");
      out.write("            if (post.commentCount > 1) {\r\n");
      out.write("                commentLink =\r\n");
      out.write("                	'<span class=\"user-comment\">' +\r\n");
      out.write("                		post.firstCommentUserNickname + ' ' +\r\n");
      out.write("                		post.firstCommentContent +\r\n");
      out.write("                	'</span>' + \r\n");
      out.write("                    '<a class=\"all-comment\" href=\"#\">' +\r\n");
      out.write("                    '    <span>댓글 ' + post.commentCount + '개 모두 보기</span>' +\r\n");
      out.write("                    '</a>';\r\n");
      out.write("            } else if(post.commentCount == 1){\r\n");
      out.write("            	commentLink =\r\n");
      out.write("            		'<span class=\"user-comment\">' +\r\n");
      out.write("	            		post.firstCommentUserNickname + ' ' +\r\n");
      out.write("	            		post.firstCommentContent +\r\n");
      out.write("	            	'</span>'\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            //좋아요 상태 관련 체크\r\n");
      out.write("            const isLiked = post.isLiked ? 'true' : 'false'; \r\n");
      out.write("            \r\n");
      out.write("            // 게시물 하나에 대한 HTML (문자열 연결)\r\n");
      out.write("            let postHtml =\r\n");
      out.write("                '<div class=\"main-post-container\">' +\r\n");
      out.write("                    '<div class=\"main-feed-header\">' +\r\n");
      out.write("                        '<div class=\"main-feed-header-left\">' +\r\n");
      out.write("                            '<a class=\"header-left-user\"  href=\"/member/profile.kh?userNo=' + post.userNo + '\"  data-type=\"Post\">' +\r\n");
      out.write("                                '<div class=\"main-feed-header-left-img\">' +\r\n");
      out.write("                                    '<img src=\"' + post.userImage + '\" alt=\"User Image\" class=\"main-feed-profile-img\">' +\r\n");
      out.write("                                '</div>' +\r\n");
      out.write("                                '<div class=\"main-feed-header-left-nickname\">' +\r\n");
      out.write("                                    '<span>' + post.userNickname + '</span>' +\r\n");
      out.write("                                '</div>' +\r\n");
      out.write("                            '</a>' +\r\n");
      out.write("                            '<div class=\"main-feed-header-left-postDate\">' +\r\n");
      out.write("                                '<span>• ' + post.postDate + '</span>' +\r\n");
      out.write("                            '</div>' +\r\n");
      out.write("                        '</div>' +\r\n");
      out.write("                        '<div class=\"main-feed-header-right\">' +\r\n");
      out.write("                            '<a class=\"report-Btn\" href=\"#\" data-post-no=\"'+ post.postNo + '\" data-target-type=\"P\">' +\r\n");
      out.write("                                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"black\"' +\r\n");
      out.write("                                    'class=\"bi bi-three-dots\" viewBox=\"0 0 16 16\">' +\r\n");
      out.write("                                    '<path d=\"M3 9.5a1.5 1.5 0 1 1 0-3' +\r\n");
      out.write("                                            ' 1.5 1.5 0 0 1 0 3m5 0a1.5' +\r\n");
      out.write("                                            ' 1.5 0 1 1 0-3 1.5 1.5 0 0 1' +\r\n");
      out.write("                                            ' 0 3m5 0a1.5 1.5 0 1 1 0-3' +\r\n");
      out.write("                                            ' 1.5 1.5 0 0 1 0 3\"/>' +\r\n");
      out.write("                                '</svg>' +\r\n");
      out.write("                            '</a>' +\r\n");
      out.write("                        '</div>' +\r\n");
      out.write("                    '</div>' + // main-feed-header\r\n");
      out.write("\r\n");
      out.write("                    '<div class=\"main-feed-content\">' +\r\n");
      out.write("                        '<div class=\"main-feed-content-img\">' +\r\n");
      out.write("                        	mediaHtml +\r\n");
      out.write("                        '</div>' +\r\n");
      out.write("                    '</div>' +\r\n");
      out.write("\r\n");
      out.write("                    '<div class=\"main-feed-footer\">' +\r\n");
      out.write("                        '<div class=\"main-feed-footer-left\">' +\r\n");
      out.write("                            '<div class=\"main-feed-like\">' +\r\n");
      out.write("                            '<a href=\"#\" class=\"post-like\" data-target-no=\"'+ post.postNo + '\" data-user-no=\"'+ post.userNo + '\" data-liked=\"'+ isLiked + '\">' +\r\n");
      out.write("                                    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"black\"' +\r\n");
      out.write("                                         'class=\"bi bi-heart\" viewBox=\"0 0 16 16\">' +\r\n");
      out.write("                                        '<path d=\"m8 2.748-.717-.737C5.6.281' +\r\n");
      out.write("                                                ' 2.514.878 1.4 3.053c-.523' +\r\n");
      out.write("                                                ' 1.023-.641 2.5.314 4.385.92' +\r\n");
      out.write("                                                ' 1.815 2.834 3.989 6.286' +\r\n");
      out.write("                                                ' 6.357 3.452-2.368 5.365-4.542' +\r\n");
      out.write("                                                ' 6.286-6.357.955-1.886.838-3.362.314-4.385' +\r\n");
      out.write("                                                ' C13.486 .878 10.4 .28 8.717 2.01zM8' +\r\n");
      out.write("                                                ' 15C-7.333 4.868 3.279-3.04 7.824' +\r\n");
      out.write("                                                ' 1.143q.09.083.176.171a3 3 0 0 1' +\r\n");
      out.write("                                                ' .176-.17C12.72-3.042 23.333' +\r\n");
      out.write("                                                ' 4.867 8 15\"/>' +\r\n");
      out.write("                                    '</svg>' +\r\n");
      out.write("                                '</a>' +\r\n");
      out.write("                            '</div>' +\r\n");
      out.write("                            '<div class=\"main-feed-comment\">' +\r\n");
      out.write("                                '<a href=\"#\">' +\r\n");
      out.write("                                    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"black\"' +\r\n");
      out.write("                                         'class=\"bi bi-chat\" viewBox=\"0 0 16 16\">' +\r\n");
      out.write("                                        '<path d=\"M2.678 11.894a1 1 0 0 1' +\r\n");
      out.write("                                                ' .287.801 11 11 0 0 1-.398' +\r\n");
      out.write("                                                ' 2c1.395-.323 2.247-.697' +\r\n");
      out.write("                                                ' 2.634-.893a1 1 0 0 1 .71-.074A8' +\r\n");
      out.write("                                                ' 8 0 0 0 8 14c3.996 0 7-2.807' +\r\n");
      out.write("                                                ' 7-6s-3.004-6-7-6-7 2.808-7' +\r\n");
      out.write("                                                ' 6c0 1.468.617 2.83 1.678' +\r\n");
      out.write("                                                ' 3.894m-.493 3.905a22 22 0 0 1' +\r\n");
      out.write("                                                ' -.713.129c-.2.032-.352-.176-.273-.362a10' +\r\n");
      out.write("                                                ' 10 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743' +\r\n");
      out.write("                                                ' 11.37 0 9.76 0 8c0-3.866' +\r\n");
      out.write("                                                ' 3.582-7 8-7s8 3.134 8' +\r\n");
      out.write("                                                ' 7-3.582 7-8 7a9 9 0 0' +\r\n");
      out.write("                                                ' 1-2.347-.306c-.52.263-1.639.742-3.468' +\r\n");
      out.write("                                                ' 1.105\"/>' +\r\n");
      out.write("                                    '</svg>' +\r\n");
      out.write("                                '</a>' +\r\n");
      out.write("                            '</div>' +\r\n");
      out.write("                        '</div>' +\r\n");
      out.write("                        '<div class=\"main-feed-footer-right\">' +\r\n");
      out.write("                            '<div class=\"main-feed-bookmark\">' +\r\n");
      out.write("                                '<a href=\"#\">' +\r\n");
      out.write("                                    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"black\"' +\r\n");
      out.write("                                         'class=\"bi bi-bookmark\" viewBox=\"0 0 16 16\">' +\r\n");
      out.write("                                        '<path d=\"M2 2a2 2 0 0 1 2-2h8a2' +\r\n");
      out.write("                                                ' 2 0 0 1 2 2v13.5a.5.5' +\r\n");
      out.write("                                                ' 0 0 1-.777.416L8' +\r\n");
      out.write("                                                ' 13.101l-5.223 2.815A.5.5' +\r\n");
      out.write("                                                ' 0 0 1 2 15.5zm2-1a1' +\r\n");
      out.write("                                                ' 1 0 0 0-1 1v12.566l4.723-2.482a.5.5' +\r\n");
      out.write("                                                ' 0 0 1 .554 0L13 14.566V2a1' +\r\n");
      out.write("                                                ' 1 0 0 0-1-1z\"/>' +\r\n");
      out.write("                                    '</svg>' +\r\n");
      out.write("                                '</a>' +\r\n");
      out.write("                            '</div>' +\r\n");
      out.write("                        '</div>' +\r\n");
      out.write("                        '<div class=\"main-feed-footer-likeCount\">' +\r\n");
      out.write("                            '<span class=\"like-count\">' + post.likeCount + '</span>명이 좋아합니다' +\r\n");
      out.write("                        '</div>' +\r\n");
      out.write("                        '<div>' +\r\n");
      out.write("                            '<div class=\"main-feed-content-text\">' +\r\n");
      out.write("                                '<span>' + post.userNickname + '</span>' +\r\n");
      out.write("                                '<span>' + post.postContent + '</span>' +\r\n");
      out.write("                            '</div>' +\r\n");
      out.write("                            '<div class=\"main-feed-footer-comment\">' +\r\n");
      out.write("                                commentLink +\r\n");
      out.write("                            '</div>' +\r\n");
      out.write("                        '</div>' +\r\n");
      out.write("                    '</div>' +\r\n");
      out.write("                '</div>';\r\n");
      out.write("			\r\n");
      out.write("             \r\n");
      out.write("            // feed-container 내부에 게시물 DOM 추가\r\n");
      out.write("            container.append(postHtml);\r\n");
      out.write("            \r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        initializeLikeButtons();\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        // 신고 modalHTML\r\n");
      out.write("        function createReportModal(targetType){\r\n");
      out.write("            \r\n");
      out.write("            let html = '';\r\n");
      out.write("            html += '<div id=\"storyModalBackdrop\" class=\"story-modal-backdrop\">';\r\n");
      out.write("            html += '<div class=\"report-modal-content\">';\r\n");
      out.write("            html += '<div class=\"report-header\">';\r\n");
      out.write("                if(targetType === 'P'){\r\n");
      out.write("                    html += '<h2>해당 게시물을 신고하시겠습니까?</h2>';\r\n");
      out.write("                } else if (targetType === 'C'){\r\n");
      out.write("                    html += '<h2>해당 댓글을 신고하시겠습니까?</h2>';\r\n");
      out.write("                }\r\n");
      out.write("            html += '</div>';\r\n");
      out.write("            html += '<div class=\"report-item\">';\r\n");
      out.write("            html += '<div class=\"report-reason\">';\r\n");
      out.write("            html += '<label><input class=\"reportRadio\" type=\"radio\" name=\"reportReason\" value=\"영리목적/홍보성\"/>영리목적/홍보성</label>';\r\n");
      out.write("            html += '<label><input class=\"reportRadio\" type=\"radio\" name=\"reportReason\" value=\"개인정보노출\"/>개인정보노출</label>';\r\n");
      out.write("            html += '<label><input class=\"reportRadio\" type=\"radio\" name=\"reportReason\" value=\"불법정보\"/>불법정보</label>';\r\n");
      out.write("            html += '<label><input class=\"reportRadio\" type=\"radio\" name=\"reportReason\" value=\"음란성/선정성\"/>음란성/선정성</label>';\r\n");
      out.write("            html += '<label><input class=\"reportRadio\" type=\"radio\" name=\"reportReason\" value=\"욕설/인신공격\"/>욕설/인신공격</label>';\r\n");
      out.write("            html += '<label><input class=\"reportRadio\" type=\"radio\" name=\"reportReason\" value=\"도배성\"/>도배성</label>';\r\n");
      out.write("            html += '</div>';\r\n");
      out.write("            html += '</div>';\r\n");
      out.write("            html += '<div class=\"report-footer\">';\r\n");
      out.write("            html += '<button class=\"btn btn-delete\" id=\"reportBtn\">신고</button>';\r\n");
      out.write("            html += '<button class=\"btn cancel-btn\" id=\"cancelBtn\">취소</button>';\r\n");
      out.write("            html += '</div>';\r\n");
      out.write("            html += '</div>';\r\n");
      out.write("            html += '</div>';\r\n");
      out.write("            \r\n");
      out.write("            return html;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        // 게시물에서 '''버튼 클릭 시\r\n");
      out.write("        $('.report-Btn').on('click', function() {\r\n");
      out.write("            const loginUserNo = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.userNo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("            const targetNo = $(this).data('target-no');\r\n");
      out.write("            const targetType = $(this).data('target-type');\r\n");
      out.write("            \r\n");
      out.write("            const reportModalHtml = createReportModal(targetType);\r\n");
      out.write("            $('body').prepend(reportModalHtml);\r\n");
      out.write("            \r\n");
      out.write("            // (이벤트) 신고 버튼\r\n");
      out.write("            $('.report-modal-content').on('click', '#reportBtn', executeReport);\r\n");
      out.write("            \r\n");
      out.write("             // (이벤트) 닫기 버튼\r\n");
      out.write("            $('.report-modal-content').on('click', '#cancelBtn', cancelReport);\r\n");
      out.write("            \r\n");
      out.write("             function executeReport(){\r\n");
      out.write("                 const selectedReason = $('input[name=\"reportReason\"]:checked').val();\r\n");
      out.write("                 \r\n");
      out.write("                 if (!confirm(\"정말 신고를 하시겠습니까?\")) return;\r\n");
      out.write("                 \r\n");
      out.write("                 if (!selectedReason) {\r\n");
      out.write("                    alert('신고 사유를 선택해주세요.');\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                 \r\n");
      out.write("                 const formData = new FormData();\r\n");
      out.write("                formData.append(\"userNo\", loginUserNo);\r\n");
      out.write("                formData.append(\"targetNo\", targetNo);\r\n");
      out.write("                formData.append(\"targetType\", targetType);\r\n");
      out.write("                formData.append(\"reportReason\", selectedReason);\r\n");
      out.write("                 \r\n");
      out.write("                 $.ajax({\r\n");
      out.write("                    url: '/report/insertReport.kh',\r\n");
      out.write("                    type: 'POST',\r\n");
      out.write("                    data: formData,\r\n");
      out.write("                    processData: false, // 데이터를 쿼리 문자열로 변환하지 않음\r\n");
      out.write("                    contentType: false, // 콘텐츠 타입을 설정하지 않음 (브라우저가 자동으로 설정)\r\n");
      out.write("                    success: function(response) {\r\n");
      out.write("                        if (response === 'success') {\r\n");
      out.write("                            alert('신고가 정상적으로 접수되었습니다.');\r\n");
      out.write("                            cancelReport();\r\n");
      out.write("                        } else if (response === 'error') {\r\n");
      out.write("                            alert('신고 중 오류가 발생했습니다.');\r\n");
      out.write("                        } else {\r\n");
      out.write("                            alert('알 수 없는 오류가 발생했습니다.');\r\n");
      out.write("                        }\r\n");
      out.write("                    },\r\n");
      out.write("                    error: function(xhr, status, error) {\r\n");
      out.write("                        alert('신고에 실패했습니다.');\r\n");
      out.write("                        console.log(error);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                 \r\n");
      out.write("             }\r\n");
      out.write("             \r\n");
      out.write("             function cancelReport(){\r\n");
      out.write("                 $(\"#storyModalBackdrop\").remove();\r\n");
      out.write("             }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    $(document).ready(function () {\r\n");
      out.write("        // 좋아요 클릭 이벤트\r\n");
      out.write("        $(document).off(\"click\", \".post-like\").on(\"click\", \".post-like\", function (event) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("            const $btn = $(this);\r\n");
      out.write("            const postNo = $btn.data(\"target-no\");\r\n");
      out.write("            const userNo = $btn.data(\"user-no\");\r\n");
      out.write("            const isLiked = $btn.data(\"liked\");\r\n");
      out.write("            const url = isLiked ? \"/post/postLikeDel.kh\" : \"/post/postLike.kh\";\r\n");
      out.write("\r\n");
      out.write("            if (!postNo || !userNo) {\r\n");
      out.write("                console.error(\"postNo 또는 userNo가 누락되었습니다.\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 좋아요 상태 변경 요청\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: url,\r\n");
      out.write("                type: \"GET\",\r\n");
      out.write("                data: { targetNo: postNo, userNo: userNo, targetType: \"P\" },\r\n");
      out.write("                success: function (response) {\r\n");
      out.write("                    if (response === \"success\") {\r\n");
      out.write("                        // 좋아요 상태 반전\r\n");
      out.write("                        const newLiked = !isLiked;\r\n");
      out.write("                        $btn.data(\"liked\", newLiked);\r\n");
      out.write("                        $btn.attr(\"data-liked\", newLiked.toString());\r\n");
      out.write("                        $btn.find(\"svg\")\r\n");
      out.write("                            .removeClass(\"bi-heart bi-heart-fill\")\r\n");
      out.write("                            .addClass(newLiked ? \"bi-heart-fill\" : \"bi-heart\");\r\n");
      out.write("\r\n");
      out.write("                        // 좋아요 개수 업데이트\r\n");
      out.write("                        updateLikeCount(postNo, $btn);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert(\"좋아요 처리 실패\");\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function () {\r\n");
      out.write("                    alert(\"좋아요 요청 처리 중 문제가 발생했습니다.\");\r\n");
      out.write("                },\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 좋아요 개수 업데이트 함수\r\n");
      out.write("        function updateLikeCount(postNo, $likeBtn) {\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: \"/post/postlikeCnt.kh\", // 좋아요 개수 확인 API\r\n");
      out.write("                type: \"GET\",\r\n");
      out.write("                data: { targetNo: postNo },\r\n");
      out.write("                success: function (likeCountResponse) {\r\n");
      out.write("                    const likeCount = parseInt(likeCountResponse) || 0;\r\n");
      out.write("                    $likeBtn.closest(\".main-post-container\")\r\n");
      out.write("                        .find(\".like-count\").text(likeCount); // 좋아요 개수 업데이트\r\n");
      out.write("                },\r\n");
      out.write("                error: function () {\r\n");
      out.write("                    console.error(\"좋아요 개수 초기화 실패\");\r\n");
      out.write("                },\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 초기화 호출\r\n");
      out.write("        initializeLikeButtons();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	  \r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fif_005f0.setParent(null);
    // /WEB-INF/views/member/sideMenu.jsp(41,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.acctLevel > 0}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
    if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("					<div class=\"one-menu\">\r\n");
        out.write("                    	<img alt=\"메뉴아이콘\" src=\"/resources/css_image/icon.png\" class=\"icon-img\">\r\n");
        out.write("                    <a href=\"/story/modalTest.kh\" class=\"menu-link\">신고 내역</a>\r\n");
        out.write("                </div>\r\n");
        out.write("				");
        int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f0.setParent(null);
    int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
    if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("    		");
        if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("    		");
        if (_jspx_meth_c_005fotherwise_005f1(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("    	");
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /WEB-INF/views/member/rightSideMenu.jsp(122,6) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty mypetList}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
    if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("    			<div class=\"family-container\">\r\n");
        out.write("    				<div class=\"family-container-title\">\r\n");
        out.write("						<span>");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.userName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("의 가족을 소개합니다</span>    				\r\n");
        out.write("    				</div>\r\n");
        out.write("    				<ul class=\"family-list\">\r\n");
        out.write("    					");
        if (_jspx_meth_c_005fforEach_005f0(_jspx_th_c_005fwhen_005f0, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("    				</ul>\r\n");
        out.write("    			</div>\r\n");
        out.write("    		");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fwhen_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fwhen_005f0);
    // /WEB-INF/views/member/rightSideMenu.jsp(128,9) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVar("mypet");
    // /WEB-INF/views/member/rightSideMenu.jsp(128,9) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/member/rightSideMenu.jsp(128,9) '${mypetList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${mypetList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
      if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("    						<li class=\"family-item\">\r\n");
          out.write("    							<div class=\"family-item-content\">\r\n");
          out.write("	    							<img class=\"profile-img\" alt=\"\" src=\"/resources/css_image/");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write(".png\">\r\n");
          out.write("	    							<div class=\"family-info\">\r\n");
          out.write("	    								<span class=\"username\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</span>\r\n");
          out.write("	    								<span class=\"pet-info\"> \r\n");
          out.write("		                                    ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.breedType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\r\n");
          out.write("			                           </span>\r\n");
          out.write("	    							</div>\r\n");
          out.write("    							</div>\r\n");
          out.write("    							<div class=\"petGender-img\">\r\n");
          out.write("		                            ");
          if (_jspx_meth_c_005fchoose_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
            return true;
          out.write("\r\n");
          out.write("		                        </div>\r\n");
          out.write("    						</li>\r\n");
          out.write("    					");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f0.doFinally();
    }
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f1 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
    int _jspx_eval_c_005fchoose_005f1 = _jspx_th_c_005fchoose_005f1.doStartTag();
    if (_jspx_eval_c_005fchoose_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("                                        ");
        if (_jspx_meth_c_005fwhen_005f1(_jspx_th_c_005fchoose_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
          return true;
        out.write("\r\n");
        out.write("                                        ");
        if (_jspx_meth_c_005fwhen_005f2(_jspx_th_c_005fchoose_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
          return true;
        out.write("\r\n");
        out.write("                                        ");
        if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
          return true;
        out.write("\r\n");
        out.write("                                    ");
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f1.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f1);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f1 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
    // /WEB-INF/views/member/rightSideMenu.jsp(141,40) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petGender == 'M'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f1 = _jspx_th_c_005fwhen_005f1.doStartTag();
    if (_jspx_eval_c_005fwhen_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("                                        	<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"skyblue\" class=\"bi bi-gender-male\" viewBox=\"0 0 16 16\">\r\n");
        out.write("											  <path fill-rule=\"evenodd\" d=\"M9.5 2a.5.5 0 0 1 0-1h5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0V2.707L9.871 6.836a5 5 0 1 1-.707-.707L13.293 2zM6 6a4 4 0 1 0 0 8 4 4 0 0 0 0-8\"/>\r\n");
        out.write("											</svg>\r\n");
        out.write("                                        ");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f1.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f2 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
    // /WEB-INF/views/member/rightSideMenu.jsp(146,40) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petGender == 'F'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f2 = _jspx_th_c_005fwhen_005f2.doStartTag();
    if (_jspx_eval_c_005fwhen_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("                                        	<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"#ff94c7\" class=\"bi bi-gender-female\" viewBox=\"0 0 16 16\">\r\n");
        out.write("											  <path fill-rule=\"evenodd\" d=\"M8 1a4 4 0 1 0 0 8 4 4 0 0 0 0-8M3 5a5 5 0 1 1 5.5 4.975V12h2a.5.5 0 0 1 0 1h-2v2.5a.5.5 0 0 1-1 0V13h-2a.5.5 0 0 1 0-1h2V9.975A5 5 0 0 1 3 5\"/>\r\n");
        out.write("											</svg>\r\n");
        out.write("                                        ");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f2.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f2);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f2, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f1);
    int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mypet.petGender}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f1 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    int _jspx_eval_c_005fotherwise_005f1 = _jspx_th_c_005fotherwise_005f1.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("    			<div class=\"re-friend-container\">\r\n");
        out.write("		            <div class=\"friend-container-title\">\r\n");
        out.write("		                <span>같은 동물 키우는 사람, 여기 있어요!</span>\r\n");
        out.write("		            </div>\r\n");
        out.write("		            <ul class=\"friend-list\">\r\n");
        out.write("		                ");
        if (_jspx_meth_c_005fforEach_005f1(_jspx_th_c_005fotherwise_005f1, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("		            </ul>\r\n");
        out.write("		        </div>\r\n");
        out.write("    		");
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f1.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f1);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fotherwise_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fotherwise_005f1);
    // /WEB-INF/views/member/rightSideMenu.jsp(165,18) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f1.setVar("friend");
    // /WEB-INF/views/member/rightSideMenu.jsp(165,18) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/member/rightSideMenu.jsp(165,18) '${friendList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${friendList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
      if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("		                    <li class=\"friend-item\">\r\n");
          out.write("		                        <div class=\"friend-item-content\">\r\n");
          out.write("		                            <img class=\"profile-img\" src=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty friend.userImage ? friend.userImage : '/resources/profile_file/default_profile.png'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\"alt=\"프로필 이미지\" />\r\n");
          out.write("		                            <div class=\"recommendation-info\">\r\n");
          out.write("		                                <span class=\"username\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.userNickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</span>\r\n");
          out.write("		                                <span class=\"pet-info\"> \r\n");
          out.write("		                                    ");
          if (_jspx_meth_c_005fchoose_005f2(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
            return true;
          out.write(' ');
          out.write('-');
          out.write(' ');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.breedType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\r\n");
          out.write("		                                </span>\r\n");
          out.write("		                            </div>                        \r\n");
          out.write("		                        </div>\r\n");
          out.write("		                        <div>\r\n");
          out.write("		                            <a href=\"javascript:void(0)\" class=\"follow-toggle ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.following ? 'unfollow-btn' : 'follow-btn'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" \r\n");
          out.write("		                                    data-userid=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" data-following=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.following}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\">\r\n");
          out.write("		                                ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.following ? '언팔로우' : '팔로우'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\r\n");
          out.write("		                            </a>\r\n");
          out.write("		                        </div>\r\n");
          out.write("		                    </li>\r\n");
          out.write("		                ");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f1.doFinally();
    }
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f2 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
    int _jspx_eval_c_005fchoose_005f2 = _jspx_th_c_005fchoose_005f2.doStartTag();
    if (_jspx_eval_c_005fchoose_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("		                                        ");
        if (_jspx_meth_c_005fwhen_005f3(_jspx_th_c_005fchoose_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
          return true;
        out.write("\r\n");
        out.write("		                                        ");
        if (_jspx_meth_c_005fwhen_005f4(_jspx_th_c_005fchoose_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
          return true;
        out.write("\r\n");
        out.write("		                                        ");
        if (_jspx_meth_c_005fotherwise_005f2(_jspx_th_c_005fchoose_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
          return true;
        out.write("\r\n");
        out.write("		                                    ");
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f2.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f2);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f2, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f3 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f3.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
    // /WEB-INF/views/member/rightSideMenu.jsp(173,42) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f3.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.petType == 'DOG'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f3 = _jspx_th_c_005fwhen_005f3.doStartTag();
    if (_jspx_eval_c_005fwhen_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write('강');
        out.write('아');
        out.write('지');
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f3.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f3);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f3, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f4(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f4 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f4.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
    // /WEB-INF/views/member/rightSideMenu.jsp(174,42) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f4.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.petType == 'CAT'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f4 = _jspx_th_c_005fwhen_005f4.doStartTag();
    if (_jspx_eval_c_005fwhen_005f4 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write('고');
        out.write('양');
        out.write('이');
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f4.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f4);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f4, _jsp_getInstanceManager());
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f2 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f2);
    int _jspx_eval_c_005fotherwise_005f2 = _jspx_th_c_005fotherwise_005f2.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${friend.petType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f2.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f2);
    org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f2, _jsp_getInstanceManager());
    return false;
  }
}
